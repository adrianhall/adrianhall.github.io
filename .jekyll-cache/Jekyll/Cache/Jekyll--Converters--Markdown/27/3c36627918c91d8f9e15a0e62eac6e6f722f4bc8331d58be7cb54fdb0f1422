I"Ҩ<p>This will be an in-depth series on authentication with <a href="https://aws-amplify.github.io?utm_source=da&amp;utm_medium=blog&amp;utm_campaign=adrianha">AWS Amplify</a>. Here are the topics I am going to cover, and I will update each blog with the links as I complete the articles.</p>

<ul>
  <li><a href="/android/2018/09/18/auth-with-aws-amplify-1/">The basics - a username/password system</a>.</li>
  <li><a href="/android/2018/09/23/auth-with-aws-amplify-2/">Customizing the UI</a>.</li>
  <li><a href="/android/2018/10/01/auth-with-aws-amplify-3/">Authenticating with Facebook</a>.</li>
  <li><a href="/android/2018/10/08/auth-with-aws-amplify-4/">Authenticating with Google</a>.</li>
  <li><a href="/android/2018/10/15/auth-with-aws-amplify-5/">Using third-party authentication providers</a>.</li>
  <li><a href="/android/2018/10/22/auth-with-aws-amplify-6/">Using Time-based One-time passwords (TOTP)</a>.</li>
  <li><a href="/android/2018/10/29/auth-with-aws-amplify-7/">Using Biometric authentication</a>.</li>
  <li><a href="/android/2018/11/05/auth-with-aws-amplify-8/">Doing fraud protection and analytics</a>.</li>
</ul>

<p>This is part 2 - customizing the UI. It was originally published as a standalone article in April 2018, and has been updated to use <a href="https://developer.android.com/topic/libraries/architecture">Android Architecture Components</a>, a part of <a href="https://developer.android.com/jetpack/">Android Jetpack</a>.</p>

<p>In <a href="/android/2018/09/18/auth-with-aws-amplify-1/">the previous article</a>, I introduced you to the basics of setting up an authentication UI with username and password by integrating a simple (provided) UI with a component called <code class="highlighter-rouge">IdentityManager</code> from the AWS Mobile SDK to provide the authentication screens. It’s nice and simple. </p>

<p>It’s also a very generic UI. Sure, you can change the colors, fonts, and logo. However, you will want to change out the UI for your own pretty quickly. In addition, it doesn’t play well with dependency injection. That means you can’t swap out the Amazon Cognito version for a mock version very easily for development and testing.</p>

<h2 id="the-authentication-flows">The authentication flows</h2>

<p>Authentication is a series of flows. Each stage in the flow requires some information that is submitted to the backend. The backend will then return a request for more information or a success/failure indicator. When you are dealing with a username/password set of flows (such as provided by Amazon Cognito user pools), the list is extensive:</p>

<p><img src="/assets/images/2018-09-23-image1.png" alt="" /></p>

<p>In general, each flow is made up of one or more activities. You initiate the flow by calling a method within Amazon Cognito with a callback. The callback is called when more information is needed to fulfill the request. Eventually you are deposited into a success/failure callback, depending on the result of the authentication.</p>

<p>The default screens provided by <code class="highlighter-rouge">IdentityManager</code> and the suite of associated classes within the AWS Mobile SDK use separate activities for each bubble in the authentication flows. However, that isn’t actually required. You can use pop-up dialogs to gather information as well.</p>

<h2 id="the-android-architecture-components-stack">The Android Architecture Components stack</h2>

<p>Of course, you can’t go haring off to write some custom layouts these days. Android has settled on MVVM as an architecture, and Android Architecture Components as the method for implementing that. That means I need to set up a stack of services, repositories and view models before I can work on the activities.</p>

<p><img src="/assets/images/2018-09-23-image2.png" alt="" /></p>

<p>I already have the <code class="highlighter-rouge">AWSService</code> and the analytics side of things. However, I need to cover the <code class="highlighter-rouge">IdentityRepository</code> and the AWS implementation of that before I can begin on the activities and view models.</p>

<p>In the previous article, I set up a backend with the Amplify CLI and will be using the same backend in this implementation. However, I now have to do all the front end work myself. That means I don’t get to use any of the screens, layouts, or code from the AWS Mobile SDK except for the low-level interface to Amazon Cognito. I can remove the <code class="highlighter-rouge">auth-ui</code> library from the <code class="highlighter-rouge">build.gradle</code> file.</p>

<p>The <code class="highlighter-rouge">IdentityRepository</code> is an interface. In Kotlin, it looks like this:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.lifecycle.LiveData</span>

<span class="k">enum</span> <span class="kd">class</span> <span class="nc">IdentityRequest</span> <span class="p">{</span>
    <span class="n">NEED_SIGNUP</span><span class="p">,</span>
    <span class="n">NEED_CREDENTIALS</span><span class="p">,</span>
    <span class="n">NEED_NEWPASSWORD</span><span class="p">,</span>
    <span class="n">NEED_MULTIFACTORCODE</span><span class="p">,</span>
    <span class="n">SUCCESS</span><span class="p">,</span>
    <span class="n">FAILURE</span>
<span class="p">}</span>

<span class="k">typealias</span> <span class="n">IdentityResponse</span> <span class="p">=</span> <span class="p">(</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;?)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>
<span class="k">typealias</span> <span class="n">IdentityHandler</span> <span class="p">=</span> <span class="p">(</span><span class="n">IdentityRequest</span><span class="p">,</span> <span class="n">Map</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span><span class="n">String</span><span class="p">&gt;?,</span> <span class="n">IdentityResponse</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Unit</span>

<span class="kd">interface</span> <span class="nc">IdentityRepository</span> <span class="p">{</span>
    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Property for the current user record (null if not signed in)</span><span class="err">
</span><span class="cm">     */</span>
    <span class="kd">val</span> <span class="py">currentUser</span><span class="p">:</span> <span class="n">LiveData</span><span class="p">&lt;</span><span class="n">User</span><span class="p">?&gt;</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Stored username</span><span class="err">
</span><span class="cm">     */</span>
    <span class="kd">val</span> <span class="py">storedUsername</span><span class="p">:</span> <span class="n">LiveData</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Initiate a sign-in flow</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">initiateSignin</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Initiate a sign-out flow</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">initiateSignout</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Initiate a forgot password flow</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">initiateForgotPassword</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Initiate sign-up flow</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">initiateSignup</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Update the stored username</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">updateStoredUsername</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="nc">String</span><span class="p">?)</span>
<span class="p">}</span></code></pre></figure>

<p>Each flow is initiated via an <code class="highlighter-rouge">initiate</code> method and there is one for each flow. It takes a handler, which is a callback. Each handler gets sent a request (which is the enum) and a map of the parameters needed to fulfill that request. When the request is fulfilled, the handler calls the callback so we can move to the next step in the flow.</p>

<p>In addition, the interface sports a <code class="highlighter-rouge">currentUser</code> which is an observable for whether we are signed in or not, and a <code class="highlighter-rouge">storedUsername</code> which is a peek into the shared preferences for storing the username. That way we can “remember” the username for later.</p>

<p>The AWS Implementation for this is rather long, but let’s take a look at one of the flows - the important sign-in flow:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">override</span> <span class="k">fun</span> <span class="nf">initiateSignin</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
      <span class="n">userPool</span><span class="p">.</span><span class="n">currentUser</span><span class="p">.</span><span class="n">getSessionInBackground</span><span class="p">(</span><span class="kd">object</span> <span class="err">: </span><span class="nc">AuthenticationHandler</span> <span class="p">{</span>
          <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSuccess</span><span class="p">(</span><span class="nv">nSession</span><span class="p">:</span> <span class="nc">CognitoUserSession</span><span class="p">?,</span> <span class="nv">newDevice</span><span class="p">:</span> <span class="nc">CognitoDevice</span><span class="p">?)</span> <span class="p">{</span>
              <span class="kd">val</span> <span class="py">userSession</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">nSession</span><span class="p">)</span> <span class="p">{</span> <span class="s">"user session is null"</span> <span class="p">}</span>
              <span class="n">storeUserSession</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="n">userSession</span><span class="p">)</span>
              <span class="n">runOnUiThread</span> <span class="p">{</span> <span class="n">handler</span><span class="p">(</span><span class="n">IdentityRequest</span><span class="p">.</span><span class="n">SUCCESS</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="n">DO_NOTHING</span><span class="p">)</span> <span class="p">}</span>
          <span class="p">}</span>

          <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="nv">exception</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">?)</span> <span class="p">=</span> <span class="n">handleFailure</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="n">exception</span><span class="o">?.</span><span class="n">message</span><span class="p">)</span>

          <span class="k">override</span> <span class="k">fun</span> <span class="nf">getAuthenticationDetails</span><span class="p">(</span><span class="nv">authenticationContinuation</span><span class="p">:</span> <span class="nc">AuthenticationContinuation</span><span class="p">?,</span> <span class="nv">userId</span><span class="p">:</span> <span class="nc">String</span><span class="p">?)</span> <span class="p">{</span>
              <span class="kd">val</span> <span class="py">continuation</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">authenticationContinuation</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Invalid continuation handler"</span> <span class="p">}</span>
              <span class="n">runOnUiThread</span> <span class="p">{</span>
                  <span class="n">handler</span><span class="p">(</span><span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_CREDENTIALS</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="n">r</span> <span class="p">-&gt;</span> <span class="n">run</span> <span class="p">{</span>
                      <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Invalid identity response"</span> <span class="p">}</span>
                      <span class="kd">val</span> <span class="py">username</span> <span class="p">=</span> <span class="n">toUsername</span><span class="p">((</span><span class="n">response</span><span class="p">[</span><span class="s">"username"</span><span class="p">]</span> <span class="o">?:</span> <span class="s">""</span><span class="p">))</span>
                      <span class="kd">val</span> <span class="py">password</span> <span class="p">=</span> <span class="n">response</span><span class="p">[</span><span class="s">"password"</span><span class="p">]</span> <span class="o">?:</span> <span class="s">""</span>
                      <span class="n">check</span><span class="p">(</span><span class="n">username</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">())</span> <span class="p">{</span> <span class="s">"username is empty"</span> <span class="p">}</span>
                      <span class="n">check</span><span class="p">(</span><span class="n">password</span><span class="p">.</span><span class="n">isNotEmpty</span><span class="p">())</span> <span class="p">{</span> <span class="s">"password is empty"</span> <span class="p">}</span>

                      <span class="n">continuation</span><span class="p">.</span><span class="n">setAuthenticationDetails</span><span class="p">(</span><span class="n">AuthenticationDetails</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span>
                      <span class="n">continuation</span><span class="p">.</span><span class="n">continueTask</span><span class="p">()</span>
                  <span class="p">}}</span>
              <span class="p">}</span>
          <span class="p">}</span>

          <span class="k">override</span> <span class="k">fun</span> <span class="nf">authenticationChallenge</span><span class="p">(</span><span class="nv">challengeContinuation</span><span class="p">:</span> <span class="nc">ChallengeContinuation</span><span class="p">?)</span> <span class="p">{</span>
              <span class="kd">val</span> <span class="py">continuation</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">challengeContinuation</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Invalid challenge continuation"</span> <span class="p">}</span>
              <span class="k">when</span> <span class="p">(</span><span class="n">continuation</span><span class="p">.</span><span class="n">challengeName</span><span class="p">)</span> <span class="p">{</span>
                  <span class="s">"NEW_PASSWORD_REQUIRED"</span> <span class="p">-&gt;</span> <span class="p">{</span>
                      <span class="n">runOnUiThread</span> <span class="p">{</span>
                          <span class="n">handler</span><span class="p">(</span><span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_NEWPASSWORD</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="n">r</span> <span class="p">-&gt;</span> <span class="n">run</span> <span class="p">{</span>
                              <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Invalid new password response"</span> <span class="p">}</span>
                              <span class="n">continuation</span><span class="p">.</span><span class="n">parameters</span><span class="p">[</span><span class="s">"NEW_PASSWORD"</span><span class="p">]</span> <span class="p">=</span> <span class="n">response</span><span class="p">[</span><span class="s">"password"</span><span class="p">]</span> <span class="o">?:</span> <span class="s">""</span>
                              <span class="n">continuation</span><span class="p">.</span><span class="n">continueTask</span><span class="p">()</span>
                          <span class="p">}}</span>
                      <span class="p">}</span>
                  <span class="p">}</span>
              <span class="p">}</span>
          <span class="p">}</span>

          <span class="k">override</span> <span class="k">fun</span> <span class="nf">getMFACode</span><span class="p">(</span><span class="nv">mfaContinuation</span><span class="p">:</span> <span class="nc">MultiFactorAuthenticationContinuation</span><span class="p">?)</span> <span class="p">{</span>
              <span class="kd">val</span> <span class="py">continuation</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">mfaContinuation</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Invalid MFA continuation"</span> <span class="p">}</span>
              <span class="n">runOnUiThread</span> <span class="p">{</span>
                  <span class="n">handler</span><span class="p">(</span><span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_MULTIFACTORCODE</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="n">r</span> <span class="p">-&gt;</span> <span class="n">run</span> <span class="p">{</span>
                      <span class="kd">val</span> <span class="py">response</span> <span class="p">=</span> <span class="n">checkNotNull</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Invalid MFA response"</span> <span class="p">}</span>
                      <span class="n">continuation</span><span class="p">.</span><span class="n">setMfaCode</span><span class="p">(</span><span class="n">response</span><span class="p">[</span><span class="s">"mfaCode"</span><span class="p">]</span> <span class="o">?:</span> <span class="s">""</span><span class="p">)</span>
                      <span class="n">continuation</span><span class="p">.</span><span class="n">continueTask</span><span class="p">()</span>
                  <span class="p">}}</span>
              <span class="p">}</span>
          <span class="p">}</span>
      <span class="p">})</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nv">exception</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">handleFailure</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="s">"Validation error"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>When we want to authenticate a user, we start by trying to authenticate the user. That will fail because it hasn’t happened yet. What happens next is interesting. The callback will be called and what is called depends on what is needed. There are five possibilities:</p>

<ul>
  <li>The authentication system needs credentials</li>
  <li>The authentication system needs a secondary (multi-factor) code</li>
  <li>The authentication system needs some other check (e.g. it’s set up to ask for a new password because the old one has expired)</li>
  <li>The authentication succeeded</li>
  <li>The authentication failed</li>
</ul>

<p>In each case, the repository sends the request on to the <code class="highlighter-rouge">handler</code> which then fills in the right information and we go through the process again.</p>

<p>One of the important things to note here is what thread is used for operations. When I call the handler, it always happens on the UI thread. When I call the network, that always happens on a background thread. That means my UI doesn’t need to worry about threading. Fortunately, the AWS Mobile SDK has methods that takes care of the background thread switch for me.</p>

<p>I use a common view model for all authentication requirements:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="kd">class</span> <span class="nc">AuthenticatorViewModel</span><span class="p">(</span><span class="k">private</span> <span class="kd">val</span> <span class="py">identityRepository</span><span class="p">:</span> <span class="n">IdentityRepository</span><span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Current user record, or null if the user is not logged in</span><span class="err">
</span><span class="cm">     */</span>
    <span class="kd">val</span> <span class="py">currentUser</span><span class="p">:</span> <span class="n">LiveData</span><span class="p">&lt;</span><span class="n">User</span><span class="p">?&gt;</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">currentUser</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Stored user name, or null if the user has never logged in</span><span class="err">
</span><span class="cm">     */</span>
    <span class="kd">val</span> <span class="py">storedUsername</span><span class="p">:</span> <span class="n">LiveData</span><span class="p">&lt;</span><span class="n">String</span><span class="p">?&gt;</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">storedUsername</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Initiate each flow in the authentication process</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">initiateSignin</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">initiateSignin</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">initiateSignup</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">initiateSignup</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">initiateForgotPassword</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">initiateForgotPassword</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * The sign-out process doesn't need to do anything other than complete as the</span><span class="err">
</span><span class="cm">     * process should either fail or be successful, in which case the currentUser</span><span class="err">
</span><span class="cm">     * will either update or not.</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">signOut</span><span class="p">()</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">initiateSignout</span> <span class="p">{</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="p">-&gt;</span> <span class="n">run</span> <span class="p">{</span> <span class="cm">/* Do Nothing */</span> <span class="p">}}</span>

    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Update the stored username</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">fun</span> <span class="nf">updateStoredUsername</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="nc">String</span><span class="p">?)</span> <span class="p">=</span> <span class="n">identityRepository</span><span class="p">.</span><span class="n">updateStoredUsername</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>As you can see, I’m not doing much except passing the request through to the repository.</p>

<h2 id="write-some-layouts">Write some layouts</h2>

<p>All the flows are available on my GitHub repository. Let’s take a look at one of those flows - the sign-in flow. This is probably the most complex flow of the three. Sign-in requires a username and password. Amazon Cognito can require the user to set a new password (known as administrator forced password change, generally when the account is first used after being created by an administrator). You can also get the backend to send the user a multi-factor authentication request via SMS or email.</p>

<p>Given the flows, I know I’ll need three layouts:</p>

<ul>
  <li>The main sign-in screen</li>
  <li>The “new password” dialog</li>
  <li>The multi-factor authentication dialog</li>
</ul>

<p>I’m going to implement the forced new password prompt and the multi-factor authentication prompt as dialogs so I can keep the flow all in one place. However, feel free to design them as separate screens instead. The important factors here in terms of design of the UI include the following:</p>

<ul>
  <li>A method of cancelling the authentication</li>
  <li>A method of initiating the forgot password and sign-up flows</li>
  <li>A username and password</li>
</ul>

<p><img src="/assets/images/2018-09-23-image3.png" alt="" /></p>

<p>Let’s take a look at the pieces for the actual Authenticator. The important piece is the event handler for the submit button (which is called when you click on <em>Sign In</em>):</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="nd">@SuppressLint</span><span class="p">(</span><span class="s">"InflateParams"</span><span class="p">)</span>
<span class="k">private</span> <span class="k">fun</span> <span class="nf">handleLogin</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">model</span><span class="p">.</span><span class="n">initiateSignin</span> <span class="p">{</span> <span class="n">identityRequest</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">callback</span> <span class="p">-&gt;</span>
        <span class="k">when</span><span class="p">(</span><span class="n">identityRequest</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_CREDENTIALS</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="n">callback</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span>
                        <span class="s">"username"</span> <span class="n">to</span> <span class="n">loginFormUsernameField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">toString</span><span class="p">(),</span>
                        <span class="s">"password"</span> <span class="n">to</span> <span class="n">loginFormPasswordField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
                <span class="p">))</span>
            <span class="p">}</span>

            <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_MULTIFACTORCODE</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">mfaDialog</span> <span class="p">=</span> <span class="n">layoutInflater</span><span class="p">.</span><span class="n">inflate</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">dialog_multifactor_auth</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
                <span class="kd">val</span> <span class="py">mfaCodeInput</span> <span class="p">=</span> <span class="n">mfaDialog</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">dialog_mfa_code</span><span class="p">)</span> <span class="k">as</span> <span class="n">EditText</span>
                <span class="kd">val</span> <span class="py">mfaInstructions</span> <span class="p">=</span> <span class="n">mfaDialog</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">dialog_mfa_instructions</span><span class="p">)</span> <span class="k">as</span> <span class="n">TextView</span>
                <span class="n">params</span><span class="o">?.</span><span class="n">let</span> <span class="p">{</span>
                    <span class="kd">val</span> <span class="py">deliveryTo</span> <span class="p">=</span> <span class="n">it</span><span class="p">.</span><span class="n">getOrDefault</span><span class="p">(</span><span class="s">"deliveryTo"</span><span class="p">,</span> <span class="s">"UNKNOWN"</span><span class="p">)</span>
                    <span class="n">mfaInstructions</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">getString</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">specific_mfa_instructions</span><span class="p">,</span> <span class="n">deliveryTo</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="n">alert</span> <span class="p">{</span>
                    <span class="n">title</span> <span class="p">=</span> <span class="s">"Enter Secondary Code"</span>
                    <span class="n">customView</span> <span class="p">=</span> <span class="n">mfaDialog</span>
                    <span class="n">positiveButton</span><span class="p">(</span><span class="s">"OK"</span><span class="p">)</span> <span class="p">{</span> <span class="n">callback</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="s">"mfaCode"</span> <span class="n">to</span> <span class="n">mfaCodeInput</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">toString</span><span class="p">()))</span> <span class="p">}</span>
                <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_NEWPASSWORD</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">newPasswordDialog</span> <span class="p">=</span> <span class="n">layoutInflater</span><span class="p">.</span><span class="n">inflate</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">dialog_new_password</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
                <span class="kd">val</span> <span class="py">passwordInput</span> <span class="p">=</span> <span class="n">newPasswordDialog</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">new_password_form_password</span><span class="p">)</span> <span class="k">as</span> <span class="n">EditText</span>
                <span class="n">alert</span> <span class="p">{</span>
                    <span class="n">title</span> <span class="p">=</span> <span class="s">"Enter New Password"</span>
                    <span class="n">customView</span> <span class="p">=</span> <span class="n">newPasswordDialog</span>
                    <span class="n">positiveButton</span><span class="p">(</span><span class="s">"OK"</span><span class="p">)</span> <span class="p">{</span> <span class="n">callback</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="s">"password"</span> <span class="n">to</span> <span class="n">passwordInput</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">toString</span><span class="p">()))</span> <span class="p">}</span>
                <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">SUCCESS</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="n">analyticsService</span><span class="p">.</span><span class="n">recordSuccessfulLogin</span><span class="p">(</span><span class="n">loginFormUsernameField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">toString</span><span class="p">())</span>
                <span class="k">this</span><span class="nd">@AuthenticatorActivity</span><span class="p">.</span><span class="n">finish</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">FAILURE</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="n">analyticsService</span><span class="p">.</span><span class="n">recordFailedLogin</span><span class="p">()</span>
                <span class="n">alert</span><span class="p">(</span><span class="n">params</span><span class="o">?.</span><span class="k">get</span><span class="p">(</span><span class="s">"message"</span><span class="p">)</span> <span class="o">?:</span> <span class="s">"Error submitting credentials"</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">title</span> <span class="p">=</span> <span class="s">"Login Denied"</span>
                    <span class="n">positiveButton</span><span class="p">(</span><span class="s">"Close"</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Do Nothing */</span> <span class="p">}</span>
                <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="k">else</span> <span class="p">-&gt;</span> <span class="p">{</span>
                <span class="n">analyticsService</span><span class="p">.</span><span class="n">recordEvent</span><span class="p">(</span><span class="s">"ERROR"</span><span class="p">,</span> <span class="n">mapOf</span><span class="p">(</span><span class="s">"error"</span> <span class="n">to</span> <span class="s">"unexpected identity request"</span><span class="p">))</span>
                <span class="n">alert</span><span class="p">(</span><span class="s">"Unknown or unexpected identity request"</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">title</span> <span class="p">=</span> <span class="s">"Something went wrong!"</span>
                    <span class="n">positiveButton</span><span class="p">(</span><span class="s">"Close"</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Do Nothing */</span> <span class="p">}</span>
                <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>When I click on the submit button, it initiates the sign-in flow. I need to specify a handler. The handler is called whenever the backend needs some information or to report success/failure. If the backend needs my username and password, I supply it from the form. If it needs something else, I pop up a dialog to get the information, and then submit it.</p>

<h2 id="update-the-mainactivity">Update the MainActivity</h2>

<p>Since I’ve updated to a custom authenticator that knows about Android Architecture Components, I can do the same with <code class="highlighter-rouge">MainActivity</code>. First, remove all the AWS specific stuff, then bring in the <code class="highlighter-rouge">AuthenticatorViewModel</code>:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">private</span> <span class="kd">val</span> <span class="py">authModel</span> <span class="k">by</span> <span class="n">viewModel</span><span class="p">&lt;</span><span class="n">AuthenticatorViewModel</span><span class="p">&gt;()</span></code></pre></figure>

<p>Then update the <code class="highlighter-rouge">onCreate()</code> method to use the <code class="highlighter-rouge">currentUser</code> field to update the navigation drawer:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="n">authModel</span><span class="p">.</span><span class="n">currentUser</span><span class="p">.</span><span class="n">observer</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">Observer</span> <span class="p">{</span>
  <span class="n">updateNavigationDrawer</span><span class="p">(</span><span class="n">it</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p>Finally, the <code class="highlighter-rouge">onNavigationItemSelected()</code> method becomes much simpler:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">override</span> <span class="k">fun</span> <span class="nf">onNavigationItemSelected</span><span class="p">(</span><span class="nv">item</span><span class="p">:</span> <span class="nc">MenuItem</span><span class="p">):</span> <span class="nc">Boolean</span> <span class="p">{</span>
    <span class="k">when</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">itemId</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">main_drawer_login</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">authModel</span><span class="p">.</span><span class="n">currentUser</span><span class="p">.</span><span class="n">value</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">authModel</span><span class="p">.</span><span class="n">signOut</span><span class="p">()</span>
                <span class="n">toast</span><span class="p">(</span><span class="s">"Successfully signed out"</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">AuthenticatorActivity</span><span class="p">&gt;()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">drawer_layout</span><span class="p">.</span><span class="n">closeDrawer</span><span class="p">(</span><span class="n">GravityCompat</span><span class="p">.</span><span class="n">START</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">true</span>
<span class="p">}</span></code></pre></figure>

<p>I’m using the <a href="https://github.com/Kotlin/anko">Anko library</a> for starting activities. I used the same library extensively in writing the activities for authentication as well. The Anko library makes producing pop-up dialog boxes really easy.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The basic UI that the AWS Mobile SDK provides gets you started very quickly. However, you will want to implement your own custom UI. With these techniques, you can get your authentication UI working rapidly as well. the AWS Amplify CLI will get the backend set up in no time, allowing you to spend your time on the front end code.</p>

<!-- AWS Links -->

<!-- Consoles -->

<!-- My Links -->

:ET