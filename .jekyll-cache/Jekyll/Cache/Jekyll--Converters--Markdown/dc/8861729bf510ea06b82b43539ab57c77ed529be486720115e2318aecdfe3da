I"ÅO<p>In the last few posts, I‚Äôve been working on a Notes app in a master-detail pattern for React Native using TypeScript. This is the last post about that project. So far, I‚Äôve:</p>

<ul>
  <li><a href="/react%20native/2017/07/26/handling-orientation-changes-in-react-native/">Worked out how to handle orientation changes</a>.</li>
  <li><a href="/react%20native/2017/08/07/implementing-swipe-right-on-a-react-native-flatlist/">Worked out how to implement swipe-to-delete</a>.</li>
  <li><a href="/react%20native/2017/08/09/debugging-react-native-with-typescript-and-vscode/">Figured out the best way to use TypeScript</a>.</li>
  <li><a href="/react%20native/2017/08/11/integrating-react-native-typescript-mobx/">Integrated MobX for the Flux pattern</a>.</li>
  <li><a href="/ios/react%20native/2017/08/14/universal-ios-apps-with-react-native/">Fixed up the project for universal iOS apps</a>.</li>
  <li><a href="/react%20native/2017/08/16/building-a-master-detail-pattern-in-react-native/">Finally written the Master-Detail pattern</a>.</li>
</ul>

<p>That‚Äôs a lot of stuff. This last post is about storage. React Native provides a method of storing data on the device called <a href="https://facebook.github.io/react-native/docs/asyncstorage.html">AsyncStorage</a>. It follows the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">Storage</a> API that is fairly well known in the JavaScript world. It‚Äôs promise driven and generally backed by SQLite, which is a nice performant on-device storage that is common on both iOS (as Core Data) and Android.</p>

<p>Some housekeeping first. I wired up a new icon that looks like a plus sign to the following event handler in <code class="highlighter-rouge">MasterDetail.tsx</code>:</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="cm">/**
 * Event handler called when the user clicks on the Add Item button
 * @memberof MasterDetail
 */</span>
<span class="nx">onAddItem</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">item</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">noteId</span><span class="p">:</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">(),</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
        <span class="na">content</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
        <span class="na">createdAt</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
        <span class="na">updatedAt</span><span class="p">:</span> <span class="mi">0</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">noteStore</span><span class="p">.</span><span class="nx">saveNote</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">noteStore</span><span class="p">.</span><span class="nx">setActiveNote</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>This creates a new note and then sets it as active. Once the user enters some information, it will be stored in the store. Now, onto the AsyncStorage stuff. The best practice suggested is to wrap the AsyncStorage class with your own class. I can use the wrapping to implement some logic for storing the data locally. Here is the <code class="highlighter-rouge">LocalStorage.ts</code> file:</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span> <span class="nx">AsyncStorage</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Note</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../models/Note</span><span class="dl">'</span><span class="p">;</span>

<span class="cm">/**
 * Deals with the local storage of Notes into AsyncStorage
 *
 * @class LocalStorage
 */</span>
<span class="kd">class</span> <span class="nx">LocalStorage</span> <span class="p">{</span>
    <span class="cm">/**
     * Get a single item
     *
     * @param {string} noteId
     * @returns {Promise&lt;Note&gt;}
     * @memberof LocalStorage
     */</span>
    <span class="k">async</span> <span class="nx">getItem</span><span class="p">(</span><span class="nx">noteId</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Note</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">`@note:</span><span class="p">${</span><span class="nx">noteId</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">json</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="k">as</span> <span class="nx">Note</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Save a single item
     *
     * @param {Note} item
     * @returns {Promise&lt;void&gt;}
     * @memberof LocalStorage
     */</span>
    <span class="k">async</span> <span class="nx">setItem</span><span class="p">(</span><span class="na">item</span><span class="p">:</span> <span class="nx">Note</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">`@note:</span><span class="p">${</span><span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">item</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Deletes a single item
     *
     * @returns {Promise&lt;void&gt;}
     * @memberof LocalStorage
     */</span>
    <span class="k">async</span> <span class="nx">deleteItem</span><span class="p">(</span><span class="na">noteId</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="s2">`@note:</span><span class="p">${</span><span class="nx">noteId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Get all the items
     *
     * @returns {Promise&lt;Note[]&gt;}
     * @memberof LocalStorage
     */</span>
    <span class="k">async</span> <span class="nx">getAllItems</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Note</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">getAllKeys</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="na">keys</span><span class="p">:</span> <span class="nx">string</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">fetchKeys</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">k</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">@note:</span><span class="dl">'</span><span class="p">);</span> <span class="p">});</span>
            <span class="k">return</span> <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">multiGet</span><span class="p">(</span><span class="nx">fetchKeys</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nx">Note</span><span class="p">;</span> <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">localStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStorage</span><span class="p">();</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">localStorage</span><span class="p">;</span></code></pre></figure>

<p>This introduces a new concept for JavaScript: async and await. These are basically markers for a Promise. Marking a method as ‚Äúasync‚Äù says ‚Äúthis returns a Promise‚Äù. Since this is TypeScript, I‚Äôm specifying the return type anyway and it‚Äôs obvious it returns a Promise.</p>

<p>There is a flip side to this, which is to make the calling method use await, like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">noteId</span><span class="p">);</span>
</code></pre></div></div>

<p>You can only use await inside of an async method, so the promise bubbles up to the top. I‚Äôve got three items ‚Äì <code class="highlighter-rouge">getItem()</code>, <code class="highlighter-rouge">deleteItem()</code> and <code class="highlighter-rouge">saveItem()</code> to do the normal CRUD elements. I‚Äôve also got a <code class="highlighter-rouge">getAllItems()</code> that fetches all the notes from the store. I go to some lengths to ensure that only JSON objects for notes end up in the notes table, and I don‚Äôt deal with exceptions (I should do this!).</p>

<p>In my <code class="highlighter-rouge">noteStore.ts</code>, I use this LocalStorage class like this:</p>

<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="nx">initializeNotes</span><span class="p">(</span><span class="nx">notes</span><span class="p">:</span> <span class="nx">Note</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">notes</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">saveNote</span><span class="p">(</span><span class="nx">note</span><span class="p">:</span> <span class="nx">Note</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`NoteStore:saveNote(</span><span class="p">${</span><span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">}</span><span class="s2">)`</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">idx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="nx">n</span><span class="p">.</span><span class="nx">noteId</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">note</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="nx">note</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">note</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">deleteNote</span><span class="p">(</span><span class="na">note</span><span class="p">:</span> <span class="nx">Note</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`NoteStore:deleteNote(</span><span class="p">${</span><span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">}</span><span class="s2">)`</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">idx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Note </span><span class="p">${</span><span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">}</span><span class="s2"> not found`</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nx">localStorage</span><span class="p">.</span><span class="nx">deleteItem</span><span class="p">(</span><span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">activeNoteId</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">activeNoteId</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Note that I don‚Äôt deal with the promise ‚Äì it just stores the data asynchronously and I move about my day. If I were to do this ‚Äúproperly‚Äù, I would have a queue of data and a queue processor that was based on a service worker that processed the queue. This would prevent a race condition within the code where the app shuts down before the save to storage happens. However, the volume of data that is being stored is so low, I‚Äôm viewing this as a very low probability.</p>

<p>The store now stores the notes to local storage, but I don‚Äôt have anything to read the local storage on startup. I do have the <code class="highlighter-rouge">initializeNotes()</code> method that cleans out the notes array and replaces it with another notes array. Note that I edit the array in-situ rather than creating a new array. I‚Äôm honestly not sure this is worth it in the observable world, but it can‚Äôt hurt anything. My notes initialization is done at the bottom of the <code class="highlighter-rouge">notesStore.ts</code> file:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">observableNoteStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NoteStore</span><span class="p">();</span>
<span class="nx">localStorage</span>
    <span class="p">.</span><span class="nx">getAllItems</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">items</span> <span class="o">=&gt;</span> <span class="nx">observableNoteStore</span><span class="p">.</span><span class="nx">initializeNotes</span><span class="p">(</span><span class="nx">items</span><span class="p">));</span>
</code></pre></div></div>

<p>This is a standard promise pattern. The <code class="highlighter-rouge">getAllItems()</code> method resolves to the list of notes from the local storage, and I use that to populate the notes in my in-memory store.</p>

<p>That‚Äôs it for this series.  Now I‚Äôm going to use this knowledge to produce a prettier version of the Notes app!</p>
:ET