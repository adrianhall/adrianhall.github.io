I"CÁ<p>This blog will explore a technique that opens up a whole new world of possibilities for notifying clients of results within a serverless application.</p>

<p>Let‚Äôs say you have built a nice mobile and web versions of a chat application that uses a GraphQL API built on top of AWS AppSync.</p>

<ul>
  <li>Users authenticate with Amazon Cognito user pools</li>
  <li>Users table is stored in DynamoDB</li>
  <li>Changes to the users table are communicated to the app via subscriptions</li>
</ul>

<p><em>How does the users table get updated?</em></p>

<p>A naive approach would be to get the clients to perform a mutation against the users table immediately after authentication. The client can just store their <code class="highlighter-rouge">userId</code> and any other user details you see fit through an <code class="highlighter-rouge">addUser</code> mutation.</p>

<p>However, this creates a security issue with a bad actor‚Ää‚Äî‚Ääand there are always bad actors‚Ää‚Äî‚Ääwho could sign in as one user and then pretend to be another.</p>

<p>To get around this security issue, a developer could create the <code class="highlighter-rouge">addUser</code> mutation to obtain the <code class="highlighter-rouge">userId</code> from the authentication information‚Ää‚Äî‚Ääthus allowing you to secure the information.</p>

<p>There is another method‚Ää‚Äî‚Ääand the technique demonstrates a mechanism for a whole new slew of useful features.</p>

<p>A developer can define an <a href="https://aws.amazon.com/lambda">AWS Lambda</a> function that is triggered after the user has authenticated with <a href="https://aws.amazon.com/cognito">Amazon Cognito</a> user pools, and then automatically calls the mutation behind the scenes.</p>

<p><img src="/assets/images/2018-10-26-image1.png" alt="" /></p>

<p>The slew of new possibilities with this technique include:</p>

<ul>
  <li>When an image is uploaded, automatically run it through Amazon Rekognition for automated tagging, calling a mutation with the new tags when it‚Äôs finished.</li>
  <li>When a video is uploaded, automatically transcribe the video so that you can search on the words spoken within the video. When the transcribe process has finished, call a mutation with the transcribed text.</li>
  <li>When you are bulk loading data into a database, call a mutation to notify the users that the database needs to be completely refreshed.</li>
  <li>If you perform a daily training on machine learning data, call a mutation to notify the users that the new machine learning data can be downloaded.</li>
</ul>

<p>Basically, whenever you need to do something server-side but notify the users, you can call a mutation to trigger subscription notifications to your clients. This is a very powerful feature. It‚Äôs also not that complicated to set up.</p>

<ol>
  <li>If you are not using the <code class="highlighter-rouge">AWS_IAM</code> authentication type, you will need to convert to using <code class="highlighter-rouge">AWS_IAM</code>.</li>
  <li>Add the mutation to your GraphQL schema.</li>
  <li>Add a policy to the authenticated role that allows users to access only the user mutations.</li>
  <li>Add a role for your Lambda function that allows the function to access the new mutation.</li>
  <li>Write a Lambda function that calls the mutation.</li>
</ol>

<p>None of this is particularly hard, especially when you use the Serverless Framework to configure everything. GraphQL is ‚Äújust‚Äù a HTTP POST with a payload, so you don‚Äôt even need a library.</p>

<h2 id="step-1-convert-to-using-aws_iam">Step 1: Convert to using AWS_IAM</h2>

<p>If you have configured your GraphQL API to use Amazon Cognito user pools, it‚Äôs likely that you have bypassed IAM. That won‚Äôt work when the backend resources need to access the GraphQL API. You have to use <code class="highlighter-rouge">AWS_IAM</code>.</p>

<p>To do that, you need to create an authenticated and unauthenticated role, then create an Amazon Cognito identity pool and link the roles you just created to the identity pool. This will also involve changing the authentication mechanism within your client applications.</p>

<p>In Serverless Framework, this is defined in the <code class="highlighter-rouge">Resources</code> section of the <code class="highlighter-rouge">serverless.yml</code> file. First, let‚Äôs configure an Amazon Cognito user pool:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">CognitoUserPoolMyPool</span><span class="pi">:</span>
  <span class="na">Type                     </span><span class="pi">:</span> <span class="s">AWS::Cognito::UserPool</span>
  <span class="na">Description              </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Username</span><span class="nv"> </span><span class="s">/</span><span class="nv"> </span><span class="s">Password</span><span class="nv"> </span><span class="s">auth</span><span class="nv"> </span><span class="s">database"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">UserPoolName           </span><span class="pi">:</span> <span class="s">${self:provider.apiname}</span>
    <span class="na">Schema</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">Name               </span><span class="pi">:</span> <span class="s">email</span>
        <span class="na">Required           </span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">Mutable            </span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">Policies</span><span class="pi">:</span>
      <span class="na">PasswordPolicy</span><span class="pi">:</span>
        <span class="na">MinimumLength      </span><span class="pi">:</span> <span class="m">6</span>
        <span class="na">RequireLowercase   </span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">RequireUppercase   </span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">RequireNumbers     </span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">RequireSymbols     </span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">AutoVerifiedAttributes </span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">email"</span> <span class="pi">]</span>
    <span class="na">MfaConfiguration       </span><span class="pi">:</span> <span class="s2">"</span><span class="s">OFF"</span>

<span class="na">AndroidUserPoolClient</span><span class="pi">:</span>
  <span class="na">Type                     </span><span class="pi">:</span> <span class="s">AWS::Cognito::UserPoolClient</span>
  <span class="na">Description              </span><span class="pi">:</span> <span class="s2">"</span><span class="s">OAuth2</span><span class="nv"> </span><span class="s">app</span><span class="nv"> </span><span class="s">client</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">Android</span><span class="nv"> </span><span class="s">app"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">ClientName             </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-android</span>
    <span class="na">GenerateSecret         </span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">UserPoolId             </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">CognitoUserPoolMyPool</span> <span class="pi">}</span>
</code></pre></div></div>

<p>Note that an Amazon Cognito user pool logical ID must always start with the string <code class="highlighter-rouge">CognitoUserPool</code> if you want to use it when defining triggers. Now, let‚Äôs define the two roles we will need:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">AuthRole</span><span class="pi">:</span>
  <span class="na">Type                     </span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>
  <span class="na">Description              </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Role</span><span class="nv"> </span><span class="s">that</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">an</span><span class="nv"> </span><span class="s">authenticated</span><span class="nv"> </span><span class="s">user</span><span class="nv"> </span><span class="s">assumes"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">RoleName               </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-auth</span>
    <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
      <span class="na">Version              </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
      <span class="na">Statement</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">Effect           </span><span class="pi">:</span> <span class="s">Allow</span>
          <span class="na">Principal</span><span class="pi">:</span>
            <span class="na">Federated      </span><span class="pi">:</span> <span class="s">cognito-identity.amazonaws.com</span>
          <span class="na">Action           </span><span class="pi">:</span> <span class="s">sts:AssumeRoleWithWebIdentity</span>
          <span class="na">Condition</span><span class="pi">:</span>
            <span class="s">ForAnyValue:StringLike:</span>
              <span class="s">"cognito-identity.amazon.com:amr": "authenticated"</span>

<span class="na">UnAuthRole</span><span class="pi">:</span>
  <span class="na">Type                     </span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>
  <span class="na">Description              </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Role</span><span class="nv"> </span><span class="s">that</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">an</span><span class="nv"> </span><span class="s">authenticated</span><span class="nv"> </span><span class="s">user</span><span class="nv"> </span><span class="s">assumes"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">RoleName               </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-unauth</span>
    <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
      <span class="na">Version              </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
      <span class="na">Statement</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">Effect           </span><span class="pi">:</span> <span class="s">Allow</span>
          <span class="na">Principal</span><span class="pi">:</span>
            <span class="na">Federated      </span><span class="pi">:</span> <span class="s">cognito-identity.amazonaws.com</span>
          <span class="na">Action           </span><span class="pi">:</span> <span class="s">sts:AssumeRoleWithWebIdentity</span>
          <span class="na">Condition</span><span class="pi">:</span>
            <span class="s">ForAnyValue:StringLike:</span>
              <span class="s">"cognito-identity.amazon.com:amr": "unauthenticated"</span>
</code></pre></div></div>

<p>These are the basic role definitions for authenticated and unauthenticated identities. They don‚Äôt actually give you permissions to access any resources. You need to attach policies to these to allow the users to access AWS services (which we will do later).</p>

<p>Now, let‚Äôs create the identity pool:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">IdentityPool</span><span class="pi">:</span>
  <span class="na">Type                  </span><span class="pi">:</span> <span class="s">AWS::Cognito::IdentityPool</span>
  <span class="na">Description           </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Federation</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">User</span><span class="nv"> </span><span class="s">Pool</span><span class="nv"> </span><span class="s">members</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">access</span><span class="nv"> </span><span class="s">AWS</span><span class="nv"> </span><span class="s">resources"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">IdentityPoolName    </span><span class="pi">:</span> <span class="s">${self:provider.apiname}_identities</span>
    <span class="na">AllowUnauthenticatedIdentities    </span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">CognitoIdentityProviders</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">ClientId        </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">AndroidUserPoolClient</span> <span class="pi">}</span>
        <span class="na">ProviderName    </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">Sub</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">cognito-idp.${self:provider.region}.amazonaws.com/#{client}'</span><span class="pi">,</span> <span class="pi">{</span> <span class="s2">"</span><span class="s">client"</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">CognitoUserPoolMyPool</span> <span class="pi">}}]}</span>

<span class="na">IdentityPoolRoleMap</span><span class="pi">:</span>
  <span class="na">Type                  </span><span class="pi">:</span> <span class="s">AWS::Cognito::IdentityPoolRoleAttachment</span>
  <span class="na">Description           </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Links</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">unauthenticated</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">authenticated</span><span class="nv"> </span><span class="s">policies</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">identity</span><span class="nv"> </span><span class="s">pool"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">IdentityPoolId      </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">IdentityPool</span> <span class="pi">}</span>
    <span class="na">Roles</span><span class="pi">:</span>
      <span class="na">unauthenticated   </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">GetAtt</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">UnAuthRole</span><span class="pi">,</span> <span class="nv">Arn</span> <span class="pi">]}</span>
      <span class="na">authenticated     </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">GetAtt</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">AuthRole</span><span class="pi">,</span> <span class="nv">Arn</span> <span class="pi">]}</span>
</code></pre></div></div>

<p>Identity pools consist of two parts:</p>

<ol>
  <li>The first tells the identity pool what identity providers to federate. In this case, I only have one‚Ää‚Äî‚Ääthe Amazon Cognito user pool. You can also add Facebook, Google, or other OIDC providers, or SAML providers like Active Directory Federated Services.</li>
  <li>The second part tells the identity pool what IAM roles to assign to the users once they are authenticated.</li>
</ol>

<p>The final step in the process is to change your GraphQL API to be <code class="highlighter-rouge">AWS_IAM</code>. I am using the <code class="highlighter-rouge">serverless-appsync-plugin</code>, which makes it easy:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">custom</span><span class="pi">:</span>
  <span class="na">appSync</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${self:provider.apiname}</span>
    <span class="na">region</span><span class="pi">:</span> <span class="s">${self:provider.region}</span>
    <span class="na">authenticationType</span><span class="pi">:</span> <span class="s">AWS_IAM</span>
    <span class="na">serviceRole</span><span class="pi">:</span> <span class="s2">"</span><span class="s">AppSyncServiceRole"</span>
</code></pre></div></div>

<p>The good news is that this is all pretty much boiler-plate. Take it as a single snippet and integrate it into your <code class="highlighter-rouge">serverless.yml</code> whenever you need to use federated identities.</p>

<p>Make sure you also update your client to use <code class="highlighter-rouge">AWS_IAM</code> and an authentication process that uses the identity pool. If you are using AWS Amplify, the library will take care of it for you once you change your configuration.</p>

<h2 id="step-2-add-a-mutation-to-your-graphql-schema">Step 2: Add a mutation to your GraphQL schema</h2>

<p>Since I am using the <code class="highlighter-rouge">serverless-appsync-plugin</code>, this is easy. I have to add something to my <code class="highlighter-rouge">schema.graphql</code> file:</p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">Mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">addUser</span><span class="p">(</span><span class="n">userId</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!,</span><span class="w"> </span><span class="n">userDetails</span><span class="p">:</span><span class="w"> </span><span class="n">UserInput</span><span class="p">):</span><span class="w"> </span><span class="n">User</span><span class="w">
    </span><span class="n">updateUser</span><span class="p">(</span><span class="n">userDetails</span><span class="p">:</span><span class="w"> </span><span class="n">UserInput</span><span class="p">!):</span><span class="w"> </span><span class="n">User</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="k">type</span><span class="w"> </span><span class="n">Subscription</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">userUpdates</span><span class="p">:</span><span class="w"> </span><span class="n">User</span><span class="w">
    </span><span class="err">@</span><span class="n">aws_subscribe</span><span class="p">(</span><span class="n">mutations</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="err">"</span><span class="n">addUser</span><span class="err">"</span><span class="p">,</span><span class="w"> </span><span class="err">"</span><span class="n">updateUser</span><span class="err">"</span><span class="p">])</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>While you are here, remove any <code class="highlighter-rouge">@aws_auth</code> decorators. The<code class="highlighter-rouge"> @aws_auth</code> decorator only applies to the Amazon Cognito user pool, and we are not using that directly any more.  I added the <code class="highlighter-rouge">addUser()</code> mutation for the Lambda to call.  It will not be available to users.</p>

<p>I also added the mutation to the list of mutations in the <code class="highlighter-rouge">@aws_subscribe</code> decorator so that both changes via the Lambda and changes from the user (for example, setting their full name) will be communicated to all clients, allowing every client to maintain the user list in real time.</p>

<p>The mapping templates should do ‚Äúwhat is required‚Äù. In my case, I want to add or update the user record in the users table within DynamoDB. The request mapping looks like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2017-02-28"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"operation"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PutItem"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"userId"</span><span class="p">:</span><span class="w"> </span><span class="err">$util.dynamodb.toDynamoDBJson($ctx.args.userId)</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"attributeValues"</span><span class="p">:</span><span class="w"> </span><span class="err">$util.dynamodb.toMapValuesJson($ctx.args.userDetails)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>It is linked into the GraphQL API using the <code class="highlighter-rouge">serverless-appsync-plugin</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">type        </span><span class="pi">:</span> <span class="s">Mutation</span>
  <span class="na">field       </span><span class="pi">:</span> <span class="s">addUser</span>
  <span class="na">dataSource  </span><span class="pi">:</span> <span class="s2">"</span><span class="s">UsersTable"</span>
  <span class="na">request     </span><span class="pi">:</span> <span class="s2">"</span><span class="s">addUser-request.vtl"</span>
  <span class="na">response    </span><span class="pi">:</span> <span class="s2">"</span><span class="s">single-response.vtl"</span>
</code></pre></div></div>

<h2 id="step-3-add-policy-to-the-authenticated-role">Step 3: Add policy to the authenticated role</h2>

<p>I want authenticated users to be able to access all the queries and subscriptions and all the mutations except for the <code class="highlighter-rouge">addUser</code> mutation.</p>

<p>To do this, I will adjust the <code class="highlighter-rouge">AuthRole</code> as follows:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">AuthRole</span><span class="pi">:</span>
  <span class="na">Type                </span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>
  <span class="na">Description         </span><span class="pi">:</span> <span class="s2">"</span><span class="s">Role</span><span class="nv"> </span><span class="s">that</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">an</span><span class="nv"> </span><span class="s">authenticated</span><span class="nv"> </span><span class="s">user</span><span class="nv"> </span><span class="s">assumes"</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">RoleName          </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-auth</span>
    <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
      <span class="na">Version         </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
      <span class="na">Statement</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">Effect      </span><span class="pi">:</span> <span class="s">Allow</span>
          <span class="na">Principal</span><span class="pi">:</span>
            <span class="na">Federated </span><span class="pi">:</span> <span class="s">cognito-identity.amazonaws.com</span>
          <span class="na">Action      </span><span class="pi">:</span> <span class="s">sts:AssumeRoleWithWebIdentity</span>
          <span class="na">Condition</span><span class="pi">:</span>
            <span class="s">ForAnyValue:StringLike:</span>
              <span class="s">"cognito-identity.amazon.com:amr": "authenticated"</span>
    <span class="na">Policies</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">PolicyName    </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-auth-appsync</span>
        <span class="na">PolicyDocument</span><span class="pi">:</span>
          <span class="na">Version     </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
          <span class="na">Statement</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">Effect  </span><span class="pi">:</span> <span class="s">Allow</span>
              <span class="na">Action  </span><span class="pi">:</span> <span class="s">appsync:GraphQL</span>
              <span class="na">Resource</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">Join</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">'</span><span class="pi">,</span> <span class="pi">[</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">GraphQlApi</span> <span class="pi">},</span> <span class="s1">'</span><span class="s">/types/Query/fields/*'</span> <span class="pi">]</span> <span class="pi">]</span> <span class="pi">}</span>
                <span class="pi">-</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">Join</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">'</span><span class="pi">,</span> <span class="pi">[</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">GraphQlApi</span> <span class="pi">},</span> <span class="s1">'</span><span class="s">/types/Subscription/fields/*'</span> <span class="pi">]</span> <span class="pi">]</span> <span class="pi">}</span>
                <span class="pi">-</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">Join</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">'</span><span class="pi">,</span> <span class="pi">[</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">GraphQlApi</span> <span class="pi">},</span> <span class="s1">'</span><span class="s">/types/Mutation/fields/updateUser'</span> <span class="pi">]</span> <span class="pi">]</span> <span class="pi">}</span>
</code></pre></div></div>

<p>There are a couple of things to note here. The permissions you give to an authenticated user are defined in the <code class="highlighter-rouge">Policies</code> section. This is an array of policy documents, so you can add multiple policies for multiple services here.</p>

<p>With the <code class="highlighter-rouge">serverless-appsync-plugin</code>, the GraphQL API ARN is provided with <code class="highlighter-rouge">{Ref: GraphQlApi }</code>‚Ää‚Äî‚Ääthis has a side-effect that you can only have one GraphQL API, which is definitely the best practice. You don‚Äôt want multiple doors to your backend to secure. I am allowing all the queries and subscriptions here, but explicitly listing the mutations that the user is allowed to perform.</p>

<p>You can do the same thing with unauthenticated users by altering the <code class="highlighter-rouge">UnauthRole</code>, which enables you to finely control what users can and cannot do.</p>

<h2 id="step-4-add-a-role-for-the-lambda-function">Step 4: Add a role for the Lambda function</h2>

<p>The final bit is that I need an IAM role that will allow my Lambda function to access the AWS AppSync API:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">PostAuthenticationRole</span><span class="pi">:</span>
  <span class="na">Type             </span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>
  <span class="na">Properties</span><span class="pi">:</span>
    <span class="na">RoleName       </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-postauth-lambda</span>
    <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
      <span class="na">Version      </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
      <span class="na">Statement</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">Effect   </span><span class="pi">:</span> <span class="s">Allow</span>
          <span class="na">Principal</span><span class="pi">:</span>
            <span class="na">Service</span><span class="pi">:</span> <span class="s">lambda.amazonaws.com</span>
          <span class="na">Action   </span><span class="pi">:</span> <span class="s">sts:AssumeRole</span>
    <span class="na">Policies</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">PolicyName </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-postauth-appsync</span>
        <span class="na">PolicyDocument</span><span class="pi">:</span>
          <span class="na">Version  </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
          <span class="na">Statement</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s">Allow</span>
              <span class="na">Action</span><span class="pi">:</span> <span class="s">appsync:GraphQL</span>
              <span class="na">Resource</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">Join</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">'</span><span class="pi">,</span> <span class="pi">[</span> <span class="pi">{</span> <span class="nv">Ref</span><span class="pi">:</span> <span class="nv">GraphQlApi</span> <span class="pi">},</span> <span class="s1">'</span><span class="s">/types/Mutation/fields/addUser'</span> <span class="pi">]</span> <span class="pi">]</span> <span class="pi">}</span>
      <span class="pi">-</span> <span class="na">PolicyName    </span><span class="pi">:</span> <span class="s">${self:provider.apiname}-postauth-cloudwatch</span>
        <span class="na">PolicyDocument</span><span class="pi">:</span>
          <span class="na">Version     </span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
          <span class="na">Statement</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">Effect  </span><span class="pi">:</span> <span class="s">Allow</span>
              <span class="na">Action  </span><span class="pi">:</span> <span class="s">logs:CreateLogGroup</span>
              <span class="na">Resource</span><span class="pi">:</span> <span class="s2">"</span><span class="s">arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:*"</span>
            <span class="pi">-</span> <span class="na">Effect  </span><span class="pi">:</span> <span class="s">Allow</span>
              <span class="na">Action  </span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">logs</span><span class="pi">:</span><span class="nv">CreateLogStream</span><span class="pi">,</span> <span class="nv">logs</span><span class="pi">:</span><span class="nv">PutLogEvents</span> <span class="pi">]</span>
              <span class="na">Resource</span><span class="pi">:</span> <span class="s2">"</span><span class="s">arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-postAuthentication:*"</span>
</code></pre></div></div>

<p>I am only allowing the Lambda function to access a single mutation‚Ää‚Äî‚Ääthe <code class="highlighter-rouge">addUser</code> mutation. This mutation is not available to the users‚Ää‚Äî‚Ääas we explicitly did not list it in the <code class="highlighter-rouge">AuthRole</code> previously.</p>

<p>I like the principal of minimal access for security. I am not expecting the Lambda to perform queries or subscriptions, so why should I give permissions to the Lambda to perform them?</p>

<p>Note that you also need to include the policies from the Basic Execution Role for AWS Lambda. These enable CloudWatch logging for the function. If you do not include these, then you won‚Äôt be able to do any logging to CloudWatch.</p>

<h2 id="step-5-write-a-lambda-function">Step 5: Write a Lambda function</h2>

<p>All this set up has been leading to this. How do I write a Lambda function to execute a mutation? Well, first off, let‚Äôs define a Lambda function within <code class="highlighter-rouge">serverless.yml</code> that will be triggered on the post authentication step:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">provider</span><span class="pi">:</span>
  <span class="na">name                 </span><span class="pi">:</span> <span class="s">aws</span>
  <span class="na">region               </span><span class="pi">:</span> <span class="s">us-east-1</span>
  <span class="na">runtime              </span><span class="pi">:</span> <span class="s">nodejs8.10</span>
  <span class="na">stage                </span><span class="pi">:</span> <span class="s">${opt:stage, 'dev'}</span>
  <span class="na">apiname              </span><span class="pi">:</span> <span class="s">${opt:apiname, 'chatql'}_${self:provider.stage}</span>
  <span class="na">environment</span><span class="pi">:</span>
    <span class="na">GRAPHQL_API        </span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">Fn</span><span class="pi">::</span><span class="nv">GetAtt</span><span class="pi">:</span> <span class="pi">[</span> <span class="nv">GraphQlApi</span><span class="pi">,</span> <span class="nv">GraphQLUrl</span> <span class="pi">]</span> <span class="pi">}</span>
    <span class="na">REGION             </span><span class="pi">:</span> <span class="s">${self:provider.region}</span>

<span class="na">functions</span><span class="pi">:</span>
  <span class="na">postAuthentication</span><span class="pi">:</span>
    <span class="na">handler            </span><span class="pi">:</span> <span class="s">cognito.postauth</span>
    <span class="na">role               </span><span class="pi">:</span> <span class="s">PostAuthenticationRole</span>
    <span class="na">events</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">cognitoUserPool</span><span class="pi">:</span>
          <span class="na">pool         </span><span class="pi">:</span> <span class="s">MyPool</span>
          <span class="na">trigger      </span><span class="pi">:</span> <span class="s">PostAuthentication</span>
</code></pre></div></div>

<p>What does this do?</p>

<ul>
  <li>The function itself is defined in a file called <code class="highlighter-rouge">cognito.js</code> and the <code class="highlighter-rouge">postauth</code> export will be executed when triggered.</li>
  <li>The function will be triggered by an event on the Amazon Cognito user pool. The pool is listed as <code class="highlighter-rouge">MyPool</code>, but defined as <code class="highlighter-rouge">CognitoUserPoolMyPool</code> (yeah‚Ää‚Äî‚Ääthis made no sense to me either).</li>
  <li>The functions will have two environment variables‚Ää‚Äî‚Ääthe <code class="highlighter-rouge">GRAPHQL_API</code> will contain the URL to the GraphQL endpoint and the <code class="highlighter-rouge">REGION</code> will contain the region that the GraphQL endpoint is located in.</li>
</ul>

<p>The Serverless Framework will bundle all the relevant files for us and deploy the function. Now, let‚Äôs take a look at my first look at the <code class="highlighter-rouge">cognito.js</code> file:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">process</span><span class="dl">'</span><span class="p">).</span><span class="nx">env</span><span class="p">;</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">postauth</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Authentication successful</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Event = </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Context = </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Environment = </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Really, all I am doing here is looking at a valid authentication event. I want to ensure that the environment is what I expect, and I want to take a look at the event that is passed to me. Once I authenticate, I‚Äôll see something akin to the following for the event structure:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"region"</span><span class="p">:</span><span class="w"> </span><span class="s2">"us-east-1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"userPoolId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"us-east-1_ABCDEFGH"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"userName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"myusername"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"callerContext"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"awsSdkVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aws-sdk-android-2.6.29"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"clientId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"androiduserpoolappclientid"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"triggerSource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PostAuthentication_Authentication"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"userAttributes"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"sub"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user-guid"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"email_verified"</span><span class="p">:</span><span class="w"> </span><span class="s2">"true"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"cognito:user_status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CONFIRMED"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Adrian Hall"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"phone_number_verified"</span><span class="p">:</span><span class="w"> </span><span class="s2">"false"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"phone_number"</span><span class="p">:</span><span class="w"> </span><span class="s2">"+17205551212"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="s2">"photoadrian@outlook.com"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"newDeviceUsed"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>You can check this for yourself in the CloudWatch logs. We need something like this because it allows us to test our Lambda function using the test facility within the AWS Lambda console:</p>

<ul>
  <li>Click on <strong>Test</strong>, or drop down the list to the left of the Test button and choose <strong>Configure test events</strong>.</li>
  <li>Copy/paste the information you saw in your CloudWatch logs for the event into the editor.</li>
  <li>Give the test a name, then click <strong>Save</strong>.</li>
</ul>

<p>You can now click the Test button to run the Lambda function as if the Amazon Cognito service had triggered it. This removes a reliance on the client application for testing.</p>

<p>The next question is ‚Äúhow do we trigger a mutation within AWS AppSync from a Lambda function‚Äù. Unfortunately, all client libraries‚Ää‚Äî‚Ääincluding AWS Amplify‚Ää‚Äî‚Äärely on standard client authentication schemes for the GraphQL connectivity, and they rely on the existence and authentication to an Amazon Cognito Identity Pool.</p>

<p>When we are operating within AWS Lambda, we don‚Äôt authenticate since we are pre-authenticated. AWS Lambda gives us an IAM access key, secret key and session token within the environment for this purpose.</p>

<p>GraphQL is routed over HTTPS. That means we can simulate the GraphQL client libraries with a simple HTTPS POST. Since we are using IAM, we need to sign the request before we deliver it. Here is my code for this:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
</pre></td><td class="code"><pre><span class="kd">const</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">process</span><span class="dl">'</span><span class="p">).</span><span class="nx">env</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">node-fetch</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">URL</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">aws-sdk</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span>
    <span class="na">region</span><span class="p">:</span> <span class="nx">env</span><span class="p">.</span><span class="nx">AWS_REGION</span><span class="p">,</span>
    <span class="na">credentials</span><span class="p">:</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">Credentials</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">AWS_ACCESS_KEY_ID</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">AWS_SECRET_ACCESS_KEY</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">AWS_SESSION_TOKEN</span><span class="p">)</span>
<span class="p">});</span>

<span class="cm">/**
 *  Amazon Cognito trigger for post-authentication
 *
 * @param {event} the details from the Amazon Cognito session about the user
 * @param {context} the AWS Lambda context
 * @param {callback} Function to call when we are done with processing.
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">postauth</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Event = </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Env = </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">env</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">AddUser</span> <span class="o">=</span> <span class="s2">`mutation AddUser($userId: ID!, $userDetails: UserInput!) {
        addUser(userId: $userId, userDetails: $userDetails) {
            userId
            name
        }
    }`</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">details</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">userId</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">userAttributes</span><span class="p">.</span><span class="nx">sub</span><span class="p">,</span>
        <span class="na">userDetails</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">name</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">userAttributes</span><span class="p">.</span><span class="nx">name</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="kd">const</span> <span class="nx">post_body</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">query</span><span class="p">:</span> <span class="nx">AddUser</span><span class="p">,</span>
        <span class="na">operationName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">AddUser</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">variables</span><span class="p">:</span> <span class="nx">details</span>
    <span class="p">};</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Posting: </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">post_body</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>

    <span class="c1">// POST the GraphQL mutation to AWS AppSync using a signed connection</span>
    <span class="kd">const</span> <span class="nx">uri</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">GRAPHQL_API</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">httpRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">HttpRequest</span><span class="p">(</span><span class="nx">uri</span><span class="p">.</span><span class="nx">href</span><span class="p">,</span> <span class="nx">env</span><span class="p">.</span><span class="nx">REGION</span><span class="p">);</span>
    <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">host</span> <span class="o">=</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">host</span><span class="p">;</span>
    <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">method</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">post_body</span><span class="p">);</span>

    <span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">credentials</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">signer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">Signers</span><span class="p">.</span><span class="nx">V4</span><span class="p">(</span><span class="nx">httpRequest</span><span class="p">,</span> <span class="dl">"</span><span class="s2">appsync</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
        <span class="nx">signer</span><span class="p">.</span><span class="nx">addAuthorization</span><span class="p">(</span><span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">credentials</span><span class="p">,</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">date</span><span class="p">.</span><span class="nx">getDate</span><span class="p">());</span>

        <span class="kd">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">method</span><span class="p">,</span>
            <span class="na">body</span><span class="p">:</span> <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span>
            <span class="na">headers</span><span class="p">:</span> <span class="nx">httpRequest</span><span class="p">.</span><span class="nx">headers</span>
        <span class="p">};</span>

        <span class="nx">fetch</span><span class="p">(</span><span class="nx">uri</span><span class="p">.</span><span class="nx">href</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`JSON Response = </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
                <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`FETCH ERROR: </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
                <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>You will need to add <code class="highlighter-rouge">node-fetch</code> and <code class="highlighter-rouge">aws-sdk</code> to the <code class="highlighter-rouge">package.json</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save</span> node-fetch aws-sdk
</code></pre></div></div>

<p>The parts of this:</p>

<ul>
  <li>Lines 22‚Äì27 define the GraphQL operation we want to execute.</li>
  <li>Lines 29‚Äì34 define the variables for the GraphQL operation.</li>
  <li>Lines 36‚Äì40 construct the <a href="https://graphql.org/learn/serving-over-http/">body of the HTTP POST</a> that we need to send to a GraphQL server.</li>
  <li>Lines 44‚Äì49 use the AWS SDK to set up the HTTP request.</li>
  <li>Lines 51‚Äì53 sign the request with SIGv4.</li>
  <li>Lines 55‚Äì70 use WhatWG Fetch to send the POST request to the server, logging the response or error.</li>
</ul>

<p>Right now, if the HTTP POST returns, then it is considered a success, which isn‚Äôt quite right. GraphQL can return the normal HTTP status codes. If there is an error, then you will get ‚Äúsuccess‚Äù but the object returned will have a list of errors. You should definitely deal with error handling appropriately.</p>

<h2 id="wrap-up">Wrap up</h2>

<p>This technique opens up a whole host of possibilities for notifying clients of results within a serverless application.</p>

<ul>
  <li>Connect your clients to your backend via GraphQL.</li>
  <li>Let your clients subscribe to changes in the GraphQL API.</li>
  <li>Then use GraphQL mutations to communicate with them from within AWS Lambda.</li>
</ul>

<!-- AWS Links -->

<!-- Consoles -->

<!-- My Links -->

:ET