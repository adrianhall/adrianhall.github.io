I"Õ`<p>In my last article, I psted about <a href="/react%20native/2017/08/09/debugging-react-native-with-typescript-and-vscode/">getting TypeScript working with React Native</a>. Iâ€™m building a flexible, best-practices, Notes App in React Native. This means I need a backing store, and it has to be local for offline capabilities. React has a definite way of building data into the UI and the manipulation of that data is an architecture known as <a href="http://facebook.github.io/flux/">Flux</a>. Flux isnâ€™t a concrete implementation, however. Normally, I would use <a href="http://redux.js.org/">Redux</a> as the concrete implementation. However, I have recently started working with <a href="https://mobx.js.org/">MobX</a> and I prefer it. This article is about integrating MobX into my application for the storage of the Notes data.</p>

<h2 id="step-1-install-packages">Step 1: Install Packages</h2>

<p>MobX splits its functionality for React and React Native across two packages â€“ the mobx package contains all the non-specific stuff and the mobx-react package contains the bindings for React and React Native:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add mobx mobx-react
</code></pre></div></div>

<h2 id="step-2-enable-decorators">Step 2: Enable Decorators</h2>

<p>MobX uses <a href="https://github.com/wycats/javascript-decorators">JavaScript decorators</a> to specify how the store is linked up to the components in your React tree. TypeScript supports decorators, which is a good thing. However, you have to enable it. Edit the tsconfig.json file and add the appropriate line:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2015"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-native"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Once this is done, you may want to restart Visual Studio Code if you are using it. Visual Studio Code does not generally pick up changes in the <code class="highlighter-rouge">tsconfig.json</code> file so you may notice some red squiggly lines for decorators until you restart.</p>

<h2 id="step-3-write-a-model">Step 3: Write a Model</h2>

<p>Iâ€™m using a small model file to define the shape of my data. Create a file called <code class="highlighter-rouge">src/models/Note.ts</code> with the following content:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Model for the Note
 */</span>
<span class="k">export</span> <span class="k">default</span> <span class="kr">interface</span> <span class="nx">Note</span> <span class="p">{</span>
    <span class="nl">noteId</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
    <span class="nx">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
    <span class="nx">content</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span>
    <span class="nx">createdAt</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span>
    <span class="nx">updatedAt</span><span class="p">:</span> <span class="nx">number</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="step-4-write-a-store">Step 4: Write a Store</h2>

<p>The observable store is the MobX version of the Flux state store. We can use TypeScript to add type annotations and use the MobX decorators to make the store observable. This is my <code class="highlighter-rouge">src/stores/noteStore.ts</code> file:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">observable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mobx</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Note</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../models/Note</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">NoteStore</span> <span class="p">{</span>
    <span class="p">@</span><span class="nd">observable</span> <span class="nx">notes</span><span class="p">:</span> <span class="nx">Note</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="nx">saveNote</span><span class="p">(</span><span class="nx">note</span><span class="p">:</span> <span class="nx">Note</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">idx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="nx">n</span><span class="p">.</span><span class="nx">noteId</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">note</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="nx">note</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">deleteNote</span><span class="p">(</span><span class="na">note</span><span class="p">:</span> <span class="nx">Note</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">idx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Note </span><span class="p">${</span><span class="nx">note</span><span class="p">.</span><span class="nx">noteId</span><span class="p">}</span><span class="s2"> not found`</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">getNote</span><span class="p">(</span><span class="na">noteId</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nx">Note</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">idx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="nx">noteId</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`Note </span><span class="p">${</span><span class="nx">noteId</span><span class="p">}</span><span class="s2"> not found`</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">notes</span><span class="p">[</span><span class="nx">idx</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">observableNoteStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NoteStore</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">newNote</span> <span class="o">=</span> <span class="p">(</span><span class="na">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">noteId</span><span class="p">:</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">(),</span>
        <span class="na">title</span><span class="p">:</span> <span class="nx">title</span><span class="p">,</span>
        <span class="na">content</span><span class="p">:</span> <span class="nx">content</span><span class="p">,</span>
        <span class="na">updatedAt</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
        <span class="na">createdAt</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span>
    <span class="p">};</span>
    <span class="nx">observableNoteStore</span><span class="p">.</span><span class="nx">saveNote</span><span class="p">(</span><span class="nx">note</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">newNote</span><span class="p">(</span><span class="dl">'</span><span class="s1">First Note</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">some content</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">newNote</span><span class="p">(</span><span class="dl">'</span><span class="s1">2nd Note</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">some content</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">newNote</span><span class="p">(</span><span class="dl">'</span><span class="s1">3rd Note</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">some content</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">newNote</span><span class="p">(</span><span class="dl">'</span><span class="s1">4th Note</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">some content</span><span class="dl">'</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">observableNoteStore</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="step-5-write-some-container-components">Step 5: Write some container components</h2>

<p>Since this is going to be a master-detail template, I want to write some common pages. For example, Iâ€™m going to write a NoteList component that takes a set of items and displays them, and Iâ€™m going to create a NoteListPage that wraps the Note List appropriately for a one-pane view of the NoteList. Iâ€™ve previously posted about <a href="/react%20native/2017/08/07/implementing-swipe-right-on-a-react-native-flatlist/">the NoteList component</a>. The <code class="highlighter-rouge">NoteListPage</code> looks like the following:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Platform</span><span class="p">,</span> <span class="nx">StyleSheet</span><span class="p">,</span> <span class="nx">View</span><span class="p">,</span> <span class="nx">ViewStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">observer</span><span class="p">,</span> <span class="nx">inject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mobx-react/native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">NoteStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../stores/noteStore</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Note</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../models/Note</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">NoteList</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./NoteList</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
    <span class="na">container</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">marginTop</span><span class="p">:</span> <span class="nx">Platform</span><span class="p">.</span><span class="nx">OS</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">ios</span><span class="dl">'</span> <span class="p">?</span> <span class="mi">20</span> <span class="p">:</span> <span class="mi">0</span>
    <span class="p">}</span> <span class="k">as</span> <span class="nx">ViewStyle</span>
<span class="p">});</span>

<span class="kr">interface</span> <span class="nx">NoteListPageProperties</span> <span class="p">{</span>
    <span class="cm">/**
     * The store reference for the notes store.  Note that this needs to be optional
     * because the &lt;Provider&gt; component adjusts things appropriately, which the
     * code checker won't pick up on.
     *
     * @type {NoteStore}
     * @memberof NoteListPageProperties
     */</span>
    <span class="nx">noteStore</span><span class="p">?:</span> <span class="nx">NoteStore</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">inject</span><span class="p">(</span><span class="dl">'</span><span class="s1">noteStore</span><span class="dl">'</span><span class="p">)</span>
<span class="p">@</span><span class="nd">observer</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">NoteListPage</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">NoteListPageProperties</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">onDeleteItem</span><span class="p">(</span><span class="na">item</span><span class="p">:</span> <span class="nx">Note</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">noteStore</span><span class="p">.</span><span class="nx">deleteNote</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">NoteList</span>
                    <span class="na">items=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">noteStore</span><span class="p">.</span><span class="nx">notes</span><span class="si">}</span>
                    <span class="na">onDeleteItem=</span><span class="si">{</span><span class="p">(</span><span class="nx">item</span><span class="p">:</span> <span class="nx">Note</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onDeleteItem</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Line 26 injects the <code class="highlighter-rouge">noteStore</code> provided by the Provider object (more on that in a minute) into the props for this component. It will be available as <code class="highlighter-rouge">this.props.noteStore</code>. Line 27 adds code to re-render the component when the observed store changes. The code inside the container component creates a list and links the <code class="highlighter-rouge">onDeleteItem</code> (which is the swipe-to-delete) to the stores <code class="highlighter-rouge">deleteNote()</code> method. If I swipe to delete, it will effect a change in the store that will then cause the container to re-render because the observed element (the notes) drive the list. I could also add an <code class="highlighter-rouge">onSelectItem()</code> to this, but I havenâ€™t added routing to this application yet, and this would be more of a state change than a store change, so it isnâ€™t germane to the MobX functionality.</p>

<h2 id="step-6-wire-the-store-to-the-components-with-the-provider">Step 6: Wire the store to the components with the Provider</h2>

<p>In my <code class="highlighter-rouge">index.tsx</code> file, I need to link the <code class="highlighter-rouge">noteStore</code> to the stack of React components. This is done with the <code class="highlighter-rouge">Provider</code> component:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StyleSheet</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">TextStyle</span><span class="p">,</span> <span class="nx">View</span><span class="p">,</span> <span class="nx">ViewStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mobx-react/native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">noteStore</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./stores/noteStore</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">NoteListPage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/NoteListPage</span><span class="dl">'</span><span class="p">;</span>

<span class="cm">/**
 * Production Application Component - this component renders the rest of the
 * application for us.
 *
 * @export
 * @class App
 * @extends {React.Component&lt;undefined, undefined&gt;}
 */</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="kc">undefined</span><span class="p">,</span> <span class="kc">undefined</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="cm">/**
   * Lifecycle method that renders the component - required
   *
   * @returns {React.Element} the React Element
   * @memberof App
   */</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">noteStore=</span><span class="si">{</span><span class="nx">noteStore</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">NoteListPage</span><span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Note that the Provider has an argument (called noteStore) that is assigned the value noteStore. It is important that the argument name is the same as the string value used in the inject statement from Step 5. Your app will replace the NoteListPage in this example. I use this format to design my page container components. I can replace the NoteListPage with NoteListDetail, for example, to ensure that the display is appropriate for what I am trying to do.</p>

<h2 id="next-steps">Next Steps</h2>

<p>Now that I have the MobX store working, I am going to move onto getting the two-pane version of the application working. Iâ€™ll show this in the next article.</p>
:ET