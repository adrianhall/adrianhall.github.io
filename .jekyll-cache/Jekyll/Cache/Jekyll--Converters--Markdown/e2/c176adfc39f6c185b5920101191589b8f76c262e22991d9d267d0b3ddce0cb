I"cç<p>This will be an in-depth series on authentication with [AWS Amplify]. Here are the topics I am going to cover, and I will update each blog with the links as I complete the articles.</p>

<ul>
  <li><a href="/android/2018/09/18/auth-with-aws-amplify-1/">The basics‚Ää-‚Ääa username/password system</a>.</li>
  <li><a href="/android/2018/09/23/auth-with-aws-amplify-2/">Customizing the UI</a>.</li>
  <li><a href="/android/2018/10/01/auth-with-aws-amplify-3/">Authenticating with Facebook</a>.</li>
  <li><a href="/android/2018/10/08/auth-with-aws-amplify-4/">Authenticating with Google</a>.</li>
  <li><a href="/android/2018/10/15/auth-with-aws-amplify-5/">Using third-party authentication providers</a>.</li>
  <li><a href="/android/2018/10/22/auth-with-aws-amplify-6/">Using Time-based One-time passwords (TOTP)</a>.</li>
  <li><a href="/android/2018/10/29/auth-with-aws-amplify-7/">Using Biometric authentication</a>.</li>
  <li><a href="/android/2018/11/05/auth-with-aws-amplify-8/">Doing fraud protection and analytics</a>.</li>
</ul>

<p>Over the last five articles, I‚Äôve covered several methods of authenticating your users. With this article, I‚Äôm forgetting Facebook, Google, and OIDC exist and concentrating on a basic username / password system. Specifically, I‚Äôm going to start talking about security and how to ensure your users credentials are protected.¬†</p>

<p>If you wish to start your backend from scratch (and I recommend you do as some settings in Amazon Cognito can only be set on initial configuration), use <code class="highlighter-rouge">amplify delete</code> to easily delete all the backend resources.</p>

<p>The service I am using for the username and password storage is Amazon Cognito user pools. This is an OIDC compliant provider that gives you sign-in capabilities together with self-service sign-up and forgot password flows. We integrated those into the app in the first and second articles. However, that isn‚Äôt enough. Most users want more security today, especially if the data you are storing is important to them. For that reason, it‚Äôs a good idea to think about multi-factor authentication.</p>

<p>There are three factors of authentication:</p>

<ul>
  <li>Something you know (for example, a username and password)</li>
  <li>Something you have (for example, a hardware token, or your phone)</li>
  <li>Something you are (for example, your fingerprint)</li>
</ul>

<p>Multi-factor authentication requires multiple factors to authenticate. For example, in this article, we are going to deal with ‚Äúsomething you know‚Äù (the username and password) and combine it with ‚Äúsomething you have‚Äù (an app on your phone).
¬†
There is a technicality here‚Ää-‚Ääif we are on the phone doing the username and password, and that same phone receives the token, is it really multi-factor authentication? The jury is out on that and it‚Äôs up to you to decide for yourself.</p>

<h2 id="time-based-one-time-passwords">Time-based One Time Passwords</h2>

<p>The second factor could be a code that is sent via email or SMS (which is the ‚Äúnormal‚Äù multi-factor authentication mode). Recently, time-based one-time passwords (or TOTP) have become popular. If you have used the Facebook ‚ÄúCode Generator‚Äù or Google Authenticator, then you already have something that generates TOTP tokens. They are used in place of the code that is sent via email or SMS.</p>

<p>In this article, we are going to go back to our original username and password authentication system that we produced in the first two articles. We will then extend that system to configure and then use TOTP for the multi-factor authentication.</p>

<h2 id="configuring-the-backend">Configuring the backend</h2>

<p>You can easily re-create the backend using the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>amplify init
<span class="nv">$ </span>amplify add auth
<span class="nv">$ </span>amplify add analytics
<span class="nv">$ </span>amplify push
</code></pre></div></div>

<p>Setting up TOTP is easily accomplished when using <code class="highlighter-rouge">amplify add auth</code> with the following answers:</p>

<p><img src="/assets/images/2018-10-22-image1.png" alt="" /></p>

<p>The important question here is ‚Äú<em>For user login, select the MFA types</em>‚Äù. You can select SMS and TOTP. You can express a preference for the type on a per-user basis.</p>

<h2 id="front-end--the-process">Front end ‚Äì the process</h2>

<p>There are two parts for the front end that we must consider. Firstly, some time after sign-in, we must configure TOTP within Amazon Cognito. This involves linking the TOTP application (e.g. Google Authenticator) with Amazon Cognito. The second thing is that we must use the authenticator when asked for the multi-factor authentication during the login process. The fortunate thing here is that asking for the TOTP is already done‚Ää-‚Ääwe‚Äôve integrated multi-factor authentication within our app already (as a dialog) and the request for the TOTP is delivered the same way.
That leaves us with configuring TOTP for an individual user. For this, I‚Äôm going to establish a new activity (called <code class="highlighter-rouge">ConfigureTOTPActivity</code>) that will do the work for me. This implements the following logic:</p>

<ol>
  <li>The activity initiates the TOTP sign-up. This is another ‚Äúauthentication flow‚Äù that needs to be managed.</li>
  <li>The callback is called with a ‚ÄúSecret Code‚Äù. This is used to generate the QR Code and configure the TOTP generator.</li>
  <li>The user is prompted for a code from the TOTP generator. Once provided, the continuation is called.</li>
  <li>If the code matches, the callback is called with SUCCESS.</li>
</ol>

<p>To implement this, I‚Äôve added a new method to the <code class="highlighter-rouge">IdentityRepository</code> interface:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**</span><span class="err">
</span><span class="cm"> * Initiate registration for TOTP passwords</span><span class="err">
</span><span class="cm"> */</span>
<span class="k">fun</span> <span class="nf">initiateTOTPSignup</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span>
</code></pre></div></div>

<p>This has also been added to the <code class="highlighter-rouge">AuthenticatorViewModel</code> as a pass-thru, similar to the other flow initiation methods. I‚Äôve also added an element into the <code class="highlighter-rouge">nav_drawer_menu.xml</code> file:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;item</span>
    <span class="na">android:id=</span><span class="s">"@+id/main_drawer_totp"</span>
    <span class="na">android:icon=</span><span class="s">"@drawable/ic_password_black_24dp"</span>
    <span class="na">android:title=</span><span class="s">"@string/nav_totp"</span>
    <span class="na">android:enabled=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>I‚Äôve updated the <code class="highlighter-rouge">updateNavigationDrawer()</code> method in the <code class="highlighter-rouge">MainActivity</code> to enable or disable the menu item based on the authentication:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="nf">updateNavigationDrawer</span><span class="p">(</span><span class="nv">isSignedIn</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">loginItem</span> <span class="p">=</span> <span class="n">nav_view</span><span class="p">.</span><span class="n">menu</span><span class="p">.</span><span class="n">findItem</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">main_drawer_login</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">totpItem</span> <span class="p">=</span> <span class="n">nav_view</span><span class="p">.</span><span class="n">menu</span><span class="p">.</span><span class="n">findItem</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">main_drawer_totp</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(!</span><span class="n">isSignedIn</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">loginItem</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">nav_signin</span><span class="p">)</span>
        <span class="n">totpItem</span><span class="p">.</span><span class="n">isEnabled</span> <span class="p">=</span> <span class="k">false</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">loginItem</span><span class="p">.</span><span class="n">title</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">nav_signout</span><span class="p">)</span>
        <span class="n">totpItem</span><span class="p">.</span><span class="n">isEnabled</span> <span class="p">=</span> <span class="k">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, I‚Äôve added some code to the <code class="highlighter-rouge">onNavigationItemSelected()</code> method in the <code class="highlighter-rouge">MainActivity</code> to switch to the <code class="highlighter-rouge">ConfigureTOTPActivity</code> when the menu item is clicked:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="k">fun</span> <span class="nf">onNavigationItemSelected</span><span class="p">(</span><span class="nv">item</span><span class="p">:</span> <span class="nc">MenuItem</span><span class="p">):</span> <span class="nc">Boolean</span> <span class="p">{</span>
    <span class="k">when</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">itemId</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">main_drawer_login</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">authModel</span><span class="p">.</span><span class="n">currentUser</span><span class="p">.</span><span class="n">value</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">authModel</span><span class="p">.</span><span class="n">signOut</span><span class="p">()</span>
                <span class="n">toast</span><span class="p">(</span><span class="s">"Successfully signed out"</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">AuthenticatorActivity</span><span class="p">&gt;()</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">main_drawer_totp</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="n">startActivity</span><span class="p">&lt;</span><span class="n">ConfigureTOTPActivity</span><span class="p">&gt;()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">drawer_layout</span><span class="p">.</span><span class="n">closeDrawer</span><span class="p">(</span><span class="n">GravityCompat</span><span class="p">.</span><span class="n">START</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">true</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now that the basics of switching to the new activity are covered, let‚Äôs take a look at implementation of the TOTP initialization process.</p>

<h2 id="the-identityrepository">The IdentityRepository</h2>

<p>We‚Äôve already established that the initiation of the TOTP configuration flow will trigger the <code class="highlighter-rouge">initiateTOTPSignup()</code> method. This will call <code class="highlighter-rouge">associateSoftwareTokenInBackground()</code> to initiate the process on the backend. There are three callbacks:</p>

<ul>
  <li><code class="highlighter-rouge">onVerify()</code> is called first. This contains the ‚Äúsecret key‚Äù. To progress, the user needs to configure their TOTP app with the secret key (more on how to do that in a little bit), then call<code class="highlighter-rouge"> setVerificationResponse()</code> with a TOTP that has been generated.</li>
  <li><code class="highlighter-rouge">onSuccess()</code> is then called to indicate success. This isn‚Äôt the end of the process, as we will see.</li>
  <li><code class="highlighter-rouge">onFailure()</code> is called if there are any problems with the process.</li>
</ul>

<p>Once successful, you need to also set TOTP as the preferred method. This is done with <code class="highlighter-rouge">setUserMfaSettingsInBackground()</code> once the TOTP registration is successful.</p>

<p>Let‚Äôs turn this into code:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="k">fun</span> <span class="nf">initiateTOTPSignup</span><span class="p">(</span><span class="nv">handler</span><span class="p">:</span> <span class="nc">IdentityHandler</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">userPool</span><span class="p">.</span><span class="n">currentUser</span><span class="p">.</span><span class="n">associateSoftwareTokenInBackground</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="kd">object</span> <span class="err">: </span><span class="nc">RegisterMfaHandler</span> <span class="p">{</span>
      <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSuccess</span><span class="p">(</span><span class="nv">sessionToken</span><span class="p">:</span> <span class="nc">String</span><span class="p">?)</span> <span class="p">{</span>
          <span class="kd">val</span> <span class="py">mfaSettings</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span>
                  <span class="n">CognitoMfaSettings</span><span class="p">(</span><span class="n">CognitoMfaSettings</span><span class="p">.</span><span class="n">SMS_MFA</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
                      <span class="n">isEnabled</span> <span class="p">=</span> <span class="k">true</span>
                      <span class="n">isPreferred</span> <span class="p">=</span> <span class="k">false</span>
                  <span class="p">},</span>
                  <span class="n">CognitoMfaSettings</span><span class="p">(</span><span class="n">CognitoMfaSettings</span><span class="p">.</span><span class="n">TOTP_MFA</span><span class="p">).</span><span class="n">apply</span> <span class="p">{</span>
                      <span class="n">isEnabled</span> <span class="p">=</span> <span class="k">true</span>
                      <span class="n">isPreferred</span> <span class="p">=</span> <span class="k">true</span>
                  <span class="p">}</span>
          <span class="p">)</span>
          <span class="n">userPool</span><span class="p">.</span><span class="n">currentUser</span><span class="p">.</span><span class="n">setUserMfaSettingsInBackground</span><span class="p">(</span><span class="n">mfaSettings</span><span class="p">,</span> <span class="kd">object</span> <span class="err">: </span><span class="nc">GenericHandler</span> <span class="p">{</span>
              <span class="k">override</span> <span class="k">fun</span> <span class="nf">onSuccess</span><span class="p">()</span> <span class="p">=</span> <span class="n">runOnUiThread</span> <span class="p">{</span> <span class="n">handler</span><span class="p">(</span><span class="n">IdentityRequest</span><span class="p">.</span><span class="n">SUCCESS</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Do Nothing */</span> <span class="p">}</span> <span class="p">}</span>
              <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="nv">exception</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">?)</span> <span class="p">=</span> <span class="n">handleFailure</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="n">exception</span><span class="o">?.</span><span class="n">message</span><span class="p">)</span>
          <span class="p">})</span>
      <span class="p">}</span>

      <span class="k">override</span> <span class="k">fun</span> <span class="nf">onFailure</span><span class="p">(</span><span class="nv">exception</span><span class="p">:</span> <span class="nc">java</span><span class="p">.</span><span class="n">lang</span><span class="p">.</span><span class="n">Exception</span><span class="p">?)</span> <span class="p">=</span> <span class="n">handleFailure</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="n">exception</span><span class="o">?.</span><span class="n">message</span><span class="p">)</span>

      <span class="k">override</span> <span class="k">fun</span> <span class="nf">onVerify</span><span class="p">(</span><span class="nv">continuation</span><span class="p">:</span> <span class="nc">VerifyMfaContinuation</span><span class="p">?)</span> <span class="p">{</span>
          <span class="n">runOnUiThread</span> <span class="p">{</span>
              <span class="n">handler</span><span class="p">(</span><span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_MULTIFACTORCODE</span><span class="p">,</span> <span class="n">continuation</span><span class="o">?.</span><span class="n">parameters</span><span class="p">)</span> <span class="p">{</span> <span class="n">response</span> <span class="p">-&gt;</span> <span class="n">run</span> <span class="p">{</span>
                  <span class="n">with</span> <span class="p">(</span><span class="n">continuation</span><span class="o">!!</span><span class="p">)</span> <span class="p">{</span>
                      <span class="n">thread</span><span class="p">(</span><span class="n">start</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
                          <span class="n">setVerificationResponse</span><span class="p">(</span><span class="n">response</span><span class="o">?.</span><span class="k">get</span><span class="p">(</span><span class="s">"mfaCode"</span><span class="p">),</span> <span class="s">"Android App"</span><span class="p">)</span>
                          <span class="n">continueTask</span><span class="p">()</span>
                      <span class="p">}</span>
                  <span class="p">}</span>
              <span class="p">}}</span>
          <span class="p">}</span>
      <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="the-configuretotpactivity">The ConfigureTOTPActivity</h2>

<p>The activity uses the same <code class="highlighter-rouge">AuthenticatorViewModel</code> as all the other auth activities. In the <code class="highlighter-rouge">onCreate()</code> method, we initiate the TOTP signup:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="nv">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="n">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="n">setContentView</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_configure_totp</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="n">initiateTOTPSignup</span> <span class="p">{</span> <span class="n">i</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">c</span> <span class="p">-&gt;</span> <span class="n">handler</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The handler is where the main work happens. We need to deal with three callbacks (values of <code class="highlighter-rouge">identityRequest</code>):</p>

<ul>
  <li><code class="highlighter-rouge">NEED_MULTIFACTORCODE</code> is called when the <code class="highlighter-rouge">associateSoftwareToken</code> needs validating. We need to show the secret key to the user, allow them to configure their TOTP generator app and then gather one token.</li>
  <li><code class="highlighter-rouge">SUCCESS</code> is called when the process is successful.</li>
  <li><code class="highlighter-rouge">FAILURE</code> is called when the process fails.</li>
</ul>

<p>The secret key can be generated in one of two ways. First, there is a very long and obnoxious random secret to enter manually into the TOTP generator. This is good if the user is using ‚Äúcopy-and-paste‚Äù to set up their TOTP generator app. The other method is to create a URI and turn that URI into a QR code. The URI must have the form:</p>

<p><tt style="margin-left: 2em">otpauth://totp/<em>Issuer</em>:<em>account</em>?secret=<em>secretKey</em>&amp;issuer=<em>Issuer</em></tt></p>

<p>The <em>issuer</em> and <em>account</em> are strings that you provide. So you might want to set the issuer to your app name and the account to the username of the user. The <em>secretKey</em> is provided by Amazon Cognito. To turn this into a QR code, I‚Äôm using the <a href="https://android-arsenal.com/details/1/2209">QRGen library</a> that I found on <a href="https://android-arsenal.com">Android Arsenal</a>. This is an easy-to-use QR code generator that can generate bitmaps for an <code class="highlighter-rouge">ImageView</code>.</p>

<p>Let‚Äôs look at this in practice:</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="nf">handler</span><span class="p">(</span><span class="nv">identityRequest</span><span class="p">:</span> <span class="nc">IdentityRequest</span><span class="p">,</span> <span class="nv">params</span><span class="p">:</span> <span class="nc">Map</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">,</span><span class="nc">String</span><span class="p">&gt;?,</span> <span class="nv">callback</span><span class="p">:</span> <span class="nc">IdentityResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">when</span><span class="p">(</span><span class="n">identityRequest</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">SUCCESS</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">"handler: SUCCESS"</span><span class="p">)</span>
            <span class="k">this</span><span class="nd">@ConfigureTOTPActivity</span><span class="p">.</span><span class="n">finish</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">FAILURE</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">"handler: FAILURE"</span><span class="p">)</span>
            <span class="n">alert</span><span class="p">(</span><span class="n">params</span><span class="o">!!</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">"message"</span><span class="p">)</span><span class="o">!!</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">title</span> <span class="p">=</span> <span class="s">"TOTP Configuration Failed"</span>
                <span class="n">positiveButton</span><span class="p">(</span><span class="s">"Close"</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="nd">@ConfigureTOTPActivity</span><span class="p">.</span><span class="n">finish</span><span class="p">()</span> <span class="p">}</span>
            <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="n">IdentityRequest</span><span class="p">.</span><span class="n">NEED_MULTIFACTORCODE</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">params</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">val</span> <span class="py">secretCode</span> <span class="p">=</span> <span class="n">params</span><span class="p">[</span><span class="s">"secretKey"</span><span class="p">]</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">secretCode</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">totp_secretcode</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">secretCode</span>
                        <span class="kd">val</span> <span class="py">uri</span> <span class="p">=</span> <span class="s">"otpauth://totp/Amazon%20Cognito:${model.currentUser.value?.id}?secret=$secretCode&amp;issuer=Amazon%20Cognito"</span>
                        <span class="kd">val</span> <span class="py">bitmap</span> <span class="p">=</span> <span class="n">QRCode</span><span class="p">.</span><span class="n">from</span><span class="p">(</span><span class="n">uri</span><span class="p">).</span><span class="n">bitmap</span><span class="p">()</span>
                        <span class="n">totp_qrcode</span><span class="p">.</span><span class="n">imageBitmap</span> <span class="p">=</span> <span class="n">bitmap</span>

                        <span class="c1">// Set up the Validate button to validate the code</span>
                        <span class="n">totp_validatecode</span><span class="p">.</span><span class="n">onClick</span> <span class="p">{</span>
                            <span class="kd">val</span> <span class="py">mfaDialog</span> <span class="p">=</span> <span class="n">layoutInflater</span><span class="p">.</span><span class="n">inflate</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">dialog_multifactor_auth</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span>
                            <span class="kd">val</span> <span class="py">mfaCodeInput</span> <span class="p">=</span> <span class="n">mfaDialog</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">dialog_mfa_code</span><span class="p">)</span> <span class="k">as</span> <span class="n">EditText</span>
                            <span class="kd">val</span> <span class="py">mfaInstructions</span> <span class="p">=</span> <span class="n">mfaDialog</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">dialog_mfa_instructions</span><span class="p">)</span> <span class="k">as</span> <span class="n">TextView</span>
                            <span class="n">mfaInstructions</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">resources</span><span class="p">.</span><span class="n">getString</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="n">string</span><span class="p">.</span><span class="n">totp_validate_instructions</span><span class="p">)</span>
                            <span class="n">alert</span> <span class="p">{</span>
                                <span class="n">title</span> <span class="p">=</span> <span class="s">"Enter TOTP Code"</span>
                                <span class="n">customView</span> <span class="p">=</span> <span class="n">mfaDialog</span>
                                <span class="n">positiveButton</span><span class="p">(</span><span class="s">"OK"</span><span class="p">)</span> <span class="p">{</span> <span class="n">callback</span><span class="p">(</span><span class="n">mapOf</span><span class="p">(</span><span class="s">"mfaCode"</span> <span class="n">to</span> <span class="n">mfaCodeInput</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">toString</span><span class="p">()))</span> <span class="p">}</span>
                            <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
                        <span class="p">}</span>
                        <span class="n">totp_validatecode</span><span class="p">.</span><span class="n">isEnabled</span> <span class="p">=</span> <span class="k">true</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">"No secretCode provided"</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">"No parameters provided"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">alert</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedMessage</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">title</span> <span class="p">=</span> <span class="s">"Something went wrong!"</span>
                    <span class="n">positiveButton</span><span class="p">(</span><span class="s">"Close"</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="nd">@ConfigureTOTPActivity</span><span class="p">.</span><span class="n">finish</span><span class="p">()</span> <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">else</span> <span class="p">-&gt;</span> <span class="p">{</span>
            <span class="n">analyticsService</span><span class="p">.</span><span class="n">recordEvent</span><span class="p">(</span><span class="s">"ERROR"</span><span class="p">,</span> <span class="n">mapOf</span><span class="p">(</span><span class="s">"error"</span> <span class="n">to</span> <span class="s">"unexpected identity request"</span><span class="p">))</span>
            <span class="n">alert</span><span class="p">(</span><span class="s">"Unknown or unexpected identity request"</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">title</span> <span class="p">=</span> <span class="s">"Something went wrong!"</span>
                <span class="n">positiveButton</span><span class="p">(</span><span class="s">"Close"</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Do Nothing */</span> <span class="p">}</span>
            <span class="p">}.</span><span class="n">show</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="other-concerns">Other concerns</h2>

<p>What happens if you do not set TOTP as the default preferred multi-factor authentication provider? (Yes, I did this!)</p>

<p>When you sign-in, the<code class="highlighter-rouge"> authenticationChallenge()</code> is called with a challengeName of <code class="highlighter-rouge">SELECT_MFA_TYPE</code>. The challenge parameters contain (among other things) a list of configured MFA types‚Ää-‚Äämost notably, they will be <code class="highlighter-rouge">SMS_MFA</code> and <code class="highlighter-rouge">SOFTWARE_TOKEN_MFA</code>. You have to respond to that challenge with an <code class="highlighter-rouge">MFA_TYPE</code> set to the appropriate value. The authentication process will then continue as before.</p>

<p>What about asking the appropriate question when asking for TOTP?</p>

<p>When <code class="highlighter-rouge">getMFACode()</code> is called, the <code class="highlighter-rouge">challengeName</code> will be set to <code class="highlighter-rouge">SOFTWARE_TOKEN_MFA</code> or <code class="highlighter-rouge">SMS_MFA</code>, depending on what sort of code it is expecting. You can use this to adjust the message that is provided to the user.</p>

<h2 id="wrap-up">Wrap up</h2>

<p>I‚Äôm not a big fan of TOTP for mobile apps. (I‚Äôm a big fan of TOTP for web apps, however). The TOTP is in another app, but on the same phone, so it‚Äôs hard to configure and requires you to swap apps to get the token. However, it‚Äôs unavoidable because of security requirements sometimes. Fortunately, Amazon Cognito supports this mode and can be adaptive in its requirements (as we shall see in the last article in this series). Also fortunately, it‚Äôs easy to configure and use within a mobile app, and the multi-factor authentication feature is flexible enough to accomodate whatever features you want.</p>
:ET