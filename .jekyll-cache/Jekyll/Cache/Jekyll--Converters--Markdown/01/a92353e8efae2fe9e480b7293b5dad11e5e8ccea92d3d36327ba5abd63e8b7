I"xh<p>In <a href="/android/2018/09/04/integrate-analytics-with-aws-amplify/">my last article</a>, I showed the current best way of integrating analytics into your Android app using Kotlin. The events are only half the story for engagement. You need to be able to segment your users so that you can send them appropriate signals to draw them back to your app. That means understanding your users — where they are, whether they have authenticated (and how), and what they are interested in.</p>

<p><a href="https://aws.amazon.com/pinpoint">Amazon Pinpoint</a> and the AWS Mobile SDK for Android provides some demographic information about the device the user is using out of the box. You can target all iOS users separately from all Android users, target a specific phone manufacturer or Android version, or a particular app version. Everything else needs to be provided by changing the endpoint profile. The endpoint profile is a blob of information about the user. It is session specific and can be easily adjusted.</p>

<p>If you followed the last article, your project is already set up for analytics — you have the service set up and you have integrated the Amazon Pinpoint SDK into your app.</p>

<h2 id="adding-authenticated-user-information">Adding authenticated user information</h2>

<p>The most basic change we can do is to add user information into the endpoint profile. When a user authenticates, you want to start recording this fact. Firstly, there is a graph within the Analytics section of Amazon Pinpoint that directly deals with active users. This graph is driven by the user information you record in the endpoint profile. Secondly, we can segment users based on whether they are authenticated or not.</p>

<p>To update the profile, we get a copy of the current endpoint profile, copy relevant information into it, then update the endpoint profile with the new information. Finally, we record an event to send the updated endpoint profile:</p>

<p>To effect this change, I added two additional methods to my definition of an analytics service with the following implementation:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="cm">/**</span><span class="err">
</span><span class="cm">  * Record a successful authentication</span><span class="err">
</span><span class="cm">  *</span><span class="err">
</span><span class="cm">  * @param username the username of the user that was authenticated</span><span class="err">
</span><span class="cm">  */</span>
<span class="k">override</span> <span class="k">fun</span> <span class="nf">recordSuccessfulLogin</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Update the endpoint profile to include the username</span>
    <span class="kd">val</span> <span class="py">profile</span> <span class="p">=</span> <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">currentEndpoint</span><span class="p">()</span>
    <span class="n">profile</span><span class="p">.</span><span class="n">user</span><span class="p">.</span><span class="n">userId</span> <span class="p">=</span> <span class="n">username</span>
    <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">updateEndpointProfile</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>

    <span class="c1">// Record the sign in</span>
    <span class="n">recordEvent</span><span class="p">(</span><span class="s">"_userauth.sign_in"</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/**</span><span class="err">
</span><span class="cm">  * Record a failed authentication</span><span class="err">
</span><span class="cm">  */</span>
<span class="k">override</span> <span class="k">fun</span> <span class="nf">recordFailedLogin</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">recordEvent</span><span class="p">(</span><span class="s">"_userauth.authfail"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>When I do authentication, I can use <code class="highlighter-rouge">recordSuccessfulLogin()</code> to record this. The endpoint will get updated and the appropriate signal will be sent to Amazon Pinpoint. The <code class="highlighter-rouge">_userauth.sign_in</code> is a special event in Amazon Pinpoint for recording a successful authentication. Adding an update to the endpoint profile will enable you to count active users:</p>

<p><img src="/assets/images/2018-09-11-image1.png" alt="Amazon Pinpoint console" class="center-image" /></p>

<p>The graphs themselves may be uninteresting. From a developer perspective, though, the daily active users and monthly active users graphs have upticks. That is caused by setting the user ID within the endpoint profile.</p>

<h2 id="adding-category-information">Adding category information</h2>

<p>A common requirement is to record “interests”. If you have a news app, you may want to opt in to news, sports, breaking news, politics, or any other number of categories. You can use a custom attribute called “categories” to store these.</p>

<p>The way I like to do this is to store the categories in a shared preferences store. You can use <a href="https://aws.amazon.com/appsync">AWS AppSync</a> to <a href="https://aws.amazon.com/blogs/mobile/user-settings-sync-for-android-with-aws-appsync/">store shared preferences</a> in the cloud so that the preferences are shared among all devices, or just use the shared preferences built into Android, which is what I will do here.</p>

<p>First, add a new method definition into the <code class="highlighter-rouge">AnalyticsService</code> interface:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="cm">/**</span><span class="err">
</span><span class="cm"> * Update the categories custom attribute within Analytics</span><span class="err">
</span><span class="cm"> */</span>
<span class="k">fun</span> <span class="nf">updateCategories</span><span class="p">(</span><span class="nv">categories</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span></code></pre></figure>

<p>Now, let’s add to the implementation in <code class="highlighter-rouge">AWSAnalyticsService</code>:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="cm">/**</span><span class="err">
</span><span class="cm">  * Where the preferences are stored on the system</span><span class="err">
</span><span class="cm">  */</span>
<span class="k">private</span> <span class="kd">val</span> <span class="py">preferencesFile</span><span class="p">:</span> <span class="n">String</span>
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="s">"${this::class.java.simpleName}.prefs"</span>

<span class="cm">/**</span><span class="err">
</span><span class="cm">  * The name of the custom attribute</span><span class="err">
</span><span class="cm">  */</span>
<span class="k">private</span> <span class="kd">val</span> <span class="py">categoriesAttributeName</span> <span class="p">=</span> <span class="s">"categories"</span>

<span class="cm">/**</span><span class="err">
</span><span class="cm">  * The shared preferences area object</span><span class="err">
</span><span class="cm">  */</span>
<span class="k">private</span> <span class="kd">var</span> <span class="py">prefs</span><span class="p">:</span> <span class="n">SharedPreferences</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">getSharedPreferences</span><span class="p">(</span><span class="n">preferencesFile</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>

<span class="n">init</span> <span class="p">{</span>
    <span class="c1">// Read the current categories list, if present</span>
    <span class="kd">val</span> <span class="py">categories</span> <span class="p">=</span> <span class="n">prefs</span><span class="p">.</span><span class="n">getStringSet</span><span class="p">(</span><span class="n">categoriesAttributeName</span><span class="p">,</span> <span class="n">emptySet</span><span class="p">())</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">categories</span><span class="p">.</span><span class="n">size</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">endpoint</span> <span class="p">=</span> <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">currentEndpoint</span><span class="p">()</span>
        <span class="n">endpoint</span><span class="p">.</span><span class="n">addAttribute</span><span class="p">(</span><span class="n">categoriesAttributeName</span><span class="p">,</span> <span class="n">categories</span><span class="p">.</span><span class="n">toList</span><span class="p">())</span>
        <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">updateEndpointProfile</span><span class="p">(</span><span class="n">endpoint</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">pinpoint</span><span class="p">.</span><span class="n">sessionClient</span><span class="p">.</span><span class="n">startSession</span><span class="p">()</span>
    <span class="n">pinpoint</span><span class="p">.</span><span class="n">analyticsClient</span><span class="p">.</span><span class="n">submitEvents</span><span class="p">()</span>
<span class="p">}</span>

<span class="cm">/**</span><span class="err">
</span><span class="cm">  * Update the categories within the endpoint profile</span><span class="err">
</span><span class="cm">  */</span>
<span class="k">override</span> <span class="k">fun</span> <span class="nf">updateCategories</span><span class="p">(</span><span class="nv">categories</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="n">prefs</span><span class="p">.</span><span class="n">edit</span><span class="p">().</span><span class="n">putStringSet</span><span class="p">(</span><span class="n">categoriesAttributeName</span><span class="p">,</span> <span class="n">categories</span><span class="p">.</span><span class="n">toSet</span><span class="p">()).</span><span class="n">apply</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">endpoint</span> <span class="p">=</span> <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">currentEndpoint</span><span class="p">()</span>
    <span class="n">endpoint</span><span class="p">.</span><span class="n">addAttribute</span><span class="p">(</span><span class="n">categoriesAttributeName</span><span class="p">,</span> <span class="n">categories</span><span class="p">)</span>
    <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">updateEndpointProfile</span><span class="p">(</span><span class="n">endpoint</span><span class="p">)</span>
    <span class="n">recordEvent</span><span class="p">(</span><span class="s">"_endpoint.updateCategories"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Whether we update the categories through a UI action or because we loaded the categories via shared preferences, we always record an event so that the endpoint profile is transmitted to the other side.</p>

<p>You can have up to 20 custom attributes, each of which can be a set of strings, single string, integer or double type.</p>

<h2 id="adding-location-information">Adding location information</h2>

<p>The final thing you may want to do is to tag each event with some location information. Step 1 is to create a location service. I separate out the location service into it’s own class that is injected via dependency injection. First, add the appropriate permissions into the app:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.ACCESS_COARSE_LOCATION"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">"android.permission.ACCESS_FINE_LOCATION"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p>You can use either coarse or fine grained location. For analytics, it’s generally good enough to be “close”, but you can use either level of granularity. The location service looks like this:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">package</span> <span class="nn">com.amazonaws.mobile.samples.picturefeed.services.aws</span>

<span class="k">import</span> <span class="nn">android.content.Context</span>
<span class="k">import</span> <span class="nn">android.content.Context.LOCATION_SERVICE</span>
<span class="k">import</span> <span class="nn">android.location.Location</span>
<span class="k">import</span> <span class="nn">android.location.LocationListener</span>
<span class="k">import</span> <span class="nn">android.location.LocationManager</span>
<span class="k">import</span> <span class="nn">android.os.Bundle</span>
<span class="k">import</span> <span class="nn">android.util.Log</span>
<span class="k">import</span> <span class="nn">com.amazonaws.mobile.samples.picturefeed.TAG</span>

<span class="kd">class</span> <span class="nc">LocationService</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">)</span> <span class="p">:</span> <span class="nc">LocationListener</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">locationManager</span> <span class="p">:</span> <span class="n">LocationManager</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">getSystemService</span><span class="p">(</span><span class="n">LOCATION_SERVICE</span><span class="p">)</span> <span class="k">as</span> <span class="n">LocationManager</span>
    <span class="k">private</span> <span class="kd">var</span> <span class="py">location</span><span class="p">:</span> <span class="n">Location</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>

    <span class="n">init</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="n">locationManager</span><span class="p">.</span><span class="n">requestLocationUpdates</span><span class="p">(</span><span class="n">LocationManager</span><span class="p">.</span><span class="n">NETWORK_PROVIDER</span><span class="p">,</span> <span class="m">0L</span><span class="p">,</span> <span class="m">0f</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
            <span class="n">location</span> <span class="p">=</span> <span class="n">locationManager</span><span class="p">.</span><span class="n">getLastKnownLocation</span><span class="p">(</span><span class="n">LocationManager</span><span class="p">.</span><span class="n">NETWORK_PROVIDER</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nv">ex</span><span class="p">:</span> <span class="nc">SecurityException</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">"Security Exception: ${ex.localizedMessage}"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">val</span> <span class="py">latitude</span> <span class="p">:</span> <span class="n">Double</span> <span class="p">=</span> <span class="n">location</span><span class="o">?.</span><span class="n">latitude</span> <span class="o">?:</span> <span class="m">0.00</span>
    <span class="kd">val</span> <span class="py">longitude</span> <span class="p">:</span> <span class="n">Double</span> <span class="p">=</span> <span class="n">location</span><span class="o">?.</span><span class="n">longitude</span> <span class="o">?:</span> <span class="m">0.00</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onLocationChanged</span><span class="p">(</span><span class="nv">location</span><span class="p">:</span> <span class="nc">Location</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">location</span> <span class="p">=</span> <span class="n">location</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onStatusChanged</span><span class="p">(</span><span class="nv">provider</span><span class="p">:</span> <span class="nc">String</span><span class="p">?,</span> <span class="nv">status</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="nv">extras</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">"onStatusChanged($provider, $status)"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onProviderEnabled</span><span class="p">(</span><span class="nv">provider</span><span class="p">:</span> <span class="nc">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">"onProviderEnabled($provider)"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onProviderDisabled</span><span class="p">(</span><span class="nv">provider</span><span class="p">:</span> <span class="nc">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="n">TAG</span><span class="p">,</span> <span class="s">"onProviderDisabled($provider)"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Reality check</strong>: This is the wrong way to do this, but is illustrative of the technique. In a real application, you would be checking permissions, asking for permission to access location, recording the preference, and doing appropriate changes to the analytics.</p>

<p>Now, let’s take a look at the <code class="highlighter-rouge">AWSAnalyticsService</code> class updates:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="kd">class</span> <span class="nc">AWSAnalyticsService</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">,</span> <span class="nv">service</span><span class="p">:</span> <span class="nc">AWSService</span><span class="p">,</span> <span class="k">private</span> <span class="kd">val</span> <span class="py">locationService</span><span class="p">:</span> <span class="n">LocationService</span><span class="p">)</span> <span class="p">:</span> <span class="nc">AnalyticsService</span> <span class="p">{</span>
    <span class="cm">/**</span><span class="err">
</span><span class="cm">     * Record a custom event into the analytics stream</span><span class="err">
</span><span class="cm">     *</span><span class="err">
</span><span class="cm">     * @param name the custom event name</span><span class="err">
</span><span class="cm">     * @param [attributes] a list of key-value pairs for recording string attributes</span><span class="err">
</span><span class="cm">     * @param [metrics] a list of key-value pairs for recording numeric metrics</span><span class="err">
</span><span class="cm">     */</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">recordEvent</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="nv">attributes</span><span class="p">:</span> <span class="nc">Map</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">,</span> <span class="nc">String</span><span class="p">&gt;?,</span> <span class="nv">metrics</span><span class="p">:</span> <span class="nc">Map</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">,</span> <span class="nc">Double</span><span class="p">&gt;?)</span> <span class="p">{</span>
        <span class="c1">// Add location to the endpoint</span>
        <span class="kd">val</span> <span class="py">endpoint</span> <span class="p">=</span> <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">currentEndpoint</span><span class="p">()</span>
        <span class="n">endpoint</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">latitude</span> <span class="p">=</span> <span class="n">locationService</span><span class="p">.</span><span class="n">latitude</span>
        <span class="n">endpoint</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">longitude</span> <span class="p">=</span> <span class="n">locationService</span><span class="p">.</span><span class="n">longitude</span>
        <span class="n">pinpoint</span><span class="p">.</span><span class="n">targetingClient</span><span class="p">.</span><span class="n">updateEndpointProfile</span><span class="p">(</span><span class="n">endpoint</span><span class="p">)</span>

        <span class="c1">// Work out what the preference</span>
        <span class="kd">val</span> <span class="py">event</span> <span class="p">=</span> <span class="n">pinpoint</span><span class="p">.</span><span class="n">analyticsClient</span><span class="p">.</span><span class="n">createEvent</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="k">for</span> <span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">in</span> <span class="n">attributes</span><span class="p">.</span><span class="n">orEmpty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">event</span><span class="p">.</span><span class="n">addAttribute</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">in</span> <span class="n">metrics</span><span class="p">.</span><span class="n">orEmpty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">event</span><span class="p">.</span><span class="n">addMetric</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">pinpoint</span><span class="p">.</span><span class="n">analyticsClient</span><span class="p">.</span><span class="n">recordEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
        <span class="n">pinpoint</span><span class="p">.</span><span class="n">analyticsClient</span><span class="p">.</span><span class="n">submitEvents</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The <code class="highlighter-rouge">endpoint.location</code> object allows you to also set the city, country, postalCode and region — all can be specified as strings. You can use the <code class="highlighter-rouge">Geocoder</code> methods within the Google Maps API for this if needed. You can also use an alternate location provider, such as the currently recommended <code class="highlighter-rouge">FusedLocationProviderClient</code>.</p>

<h2 id="basic-segmentation">Basic segmentation</h2>

<p>Why would we want to do all this work? As I mentioned at the beginning of the article, we want to be able to engage our users by sending them messages that may be relevant to them. Part of this is user segmentation.</p>

<p>Let’s go back to the Amazon Pinpoint console:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">amplify analytics console</code></pre></figure>

<p>Now, go to <strong>Segments</strong> &gt; <strong>New Segment</strong> to create a segment. Start building your segment by selecting <strong>Custom Attributes</strong>, then <strong>categories</strong>, then one of your categories:</p>

<p><img src="/assets/images/2018-09-11-image2.png" alt="Segmentation in the Amazon Pinpoint console" class="center-image" /></p>

<p>Your standard attributes are the phone type, manufacturer, app version, and so on. The custom attributes are the ones that you programmatically enable via the endpoint profile.</p>

<p>Now that you have a segment, use <strong>Settings</strong> to enable a channel, then create a campaign with the segment you have defined. The SMS and Email channels are relatively easily configured. Push notifications requires more set up (and I’ll be covering that in a future article).</p>

<!-- AWS Links -->

<!-- Consoles -->

<!-- My Links -->

:ET