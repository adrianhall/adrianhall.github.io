I"Ñõ<p>I‚Äôm progressing on my ‚Äúmaster-detail‚Äù pattern for a react-native app. The actual implementation of master-detail is shockingly simple (more on that later). However, I bumped into some specific issues when I was implementing it. The first of these was covered last time ‚Äì <a href="/react%20native/2017/07/26/handling-orientation-changes-in-react-native/">how to detect orientation changes in React Native</a>. The next is this. How do I implement swipe-right so that I can add a swipe-to-delete function to a FlatList.</p>

<p>Let me explain a little further. The latest edition of React Native has updated the list handling. ListView is (or will be) deprecated. A bunch of new list handling methods come in, among them the <a href="https://facebook.github.io/react-native/docs/flatlist.html">FlatList</a>, <a href="https://facebook.github.io/react-native/docs/sectionlist.html">SectionList</a> and <a href="https://facebook.github.io/react-native/docs/virtualizedlist.html">VirtualizedList</a>. This is great. I no longer have to implement a data source. All I have to do is pass the data I want to render to the FlatList and a rendering function and I am done.</p>

<p>There is also another component ‚Äì the <a href="https://github.com/dancormier/react-native-swipeout">Swipeout</a> ‚Äì that implements swiping. However, it does it for ListView, which is deprecated. So no joy there. Or so I thought. It‚Äôs actually possible, but with a huge set of provisos.</p>

<p>Let‚Äôs start with the setup. I have two components ‚Äì a <code class="highlighter-rouge">NoteList.js</code> component that renders the list, and a <code class="highlighter-rouge">NoteListItem.js</code> that renders the <code class="highlighter-rouge">NoteListItem</code>. I want a few events to fire on the <code class="highlighter-rouge">NoteList.js</code>:</p>

<ul>
  <li><code class="highlighter-rouge">onSelectItem(item)</code> will fire when the item is pressed.</li>
  <li><code class="highlighter-rouge">onDeleteItem(item)</code> will fire when the item is swipe-right deleted.</li>
  <li><code class="highlighter-rouge">onAddItem()</code> will fire when the plus item in the status bar is pressed.</li>
</ul>

<p>These will then effect a scene change or a data update as needed. There are a couple of rules to keep in mind:</p>

<ol>
  <li>Touchable events must have a native item as their direct child (or pass on setNativeProps).</li>
  <li>Swipeout requires the <code class="highlighter-rouge">rowId</code> to handle open/close properly (so only one swipe drawer is open at any given time).</li>
</ol>

<p>The first rule means you need to handle an <code class="highlighter-rouge">onPress</code> event in the <code class="highlighter-rouge">NoteListItem</code> renderer which is then picked up by the list item. Here is my <code class="highlighter-rouge">NoteListItem.js</code> script:</p>

<figure class="highlight"><pre><code class="language-jsx" data-lang="jsx"><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PropTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">StyleSheet</span><span class="p">,</span> <span class="nx">Text</span><span class="p">,</span> <span class="nx">TouchableHighlight</span><span class="p">,</span> <span class="nx">View</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">styles</span><span class="o">=</span><span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="c1">// Place your stylesheet here</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">NoteListItem</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
        <span class="cm">/**
         * The item to be rendered
         */</span>
        <span class="na">item</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">shape</span><span class="p">({</span>
            <span class="na">noteId</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">title</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">content</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">createdAt</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">updatedAt</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span>
        <span class="p">}).</span><span class="nx">isRequired</span><span class="p">,</span>

        <span class="cm">/**
         * Event Handler when a user clicks on the item
         */</span>
        <span class="na">onPress</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span>
    <span class="p">};</span>

    <span class="kd">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">onPress</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`NoteListItem::onPress(</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="p">}</span>
    <span class="p">};</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">TouchableHighlight</span> <span class="na">onPress=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onPress</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">titleContainer</span><span class="si">}</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">infoContainer</span><span class="si">}</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">info</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">TouchableHighlight</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Note how I pass in the <code class="highlighter-rouge">onPress</code> event handler (with a default, in case you don‚Äôt do this). I also wrap the <code class="highlighter-rouge">View</code> (which is a native component) in the <code class="highlighter-rouge">TouchableHighlight</code> so that my entire view is clickable. This makes the entire row clickable if we define an <code class="highlighter-rouge">onPress</code> event handler.</p>

<p>Let‚Äôs take a look at the setup of the <code class="highlighter-rouge">NoteList.js</code> class first.</p>

<figure class="highlight"><pre><code class="language-jsx" data-lang="jsx"><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">PropTypes</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">prop-types</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FlatList</span><span class="p">,</span> <span class="nx">Platform</span><span class="p">,</span> <span class="nx">StyleSheet</span><span class="p">,</span> <span class="nx">TouchableHighlight</span><span class="p">,</span> <span class="nx">View</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Icon</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-vector-icons/MaterialCommunityIcons</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Swipeout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-swipeout</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ActionBar</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./ActionBar</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">NoteListItem</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./NoteListItem</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">styles</span> <span class="o">=</span> <span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
  <span class="c1">// Put your stylesheet here</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">NoteList</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
        <span class="cm">/**
         * The items to be rendered
         */</span>
        <span class="na">items</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">arrayOf</span><span class="p">(</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">shape</span><span class="p">({</span>
            <span class="na">noteId</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">title</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">content</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">createdAt</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
            <span class="na">updatedAt</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">.</span><span class="nx">isRequired</span>
        <span class="p">})).</span><span class="nx">isRequired</span><span class="p">,</span>

        <span class="cm">/**
         * The Add Item event handler
         */</span>
        <span class="na">onAddItem</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">,</span>

        <span class="cm">/**
         * The Delete Item event handler
         */</span>
        <span class="na">onDeleteItem</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">,</span>

        <span class="cm">/**
         * The Refresh Items event handler
         */</span>
        <span class="na">onRefreshItems</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">,</span>

        <span class="cm">/**
         * The Item Selection event handler
         */</span>
        <span class="na">onSelectItem</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span><span class="p">,</span>

        <span class="cm">/**
         * True if refreshing data now
         */</span>
        <span class="na">refreshing</span><span class="p">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">bool</span>
    <span class="p">};</span>

    <span class="kd">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">onAddItem</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onAddItem pressed</span><span class="dl">'</span><span class="p">);</span> <span class="p">},</span>
        <span class="na">onDeleteItem</span><span class="p">:</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onDeleteItem </span><span class="dl">'</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span> <span class="p">},</span>
        <span class="na">onRefreshItems</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`onRefreshItem called`</span><span class="p">);</span> <span class="p">},</span>
        <span class="na">onSelectItem</span><span class="p">:</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onSelectItem </span><span class="dl">'</span><span class="p">,</span> <span class="nx">item</span><span class="p">);</span> <span class="p">},</span>
        <span class="na">refreshing</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Creates a new version of the component.  The major feature here is to
     * set up the activeRow - this is set to the row that has the swipe-to-delete
     * buttons displayed
     *
     * @param {Object} props list of component properties
     * @memberof NoteList
     */</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Renders a single row of the flat list
     */</span>
    <span class="nx">renderItem</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">NoteListItem</span> <span class="na">item=</span><span class="si">{</span><span class="nx">row</span><span class="p">.</span><span class="nx">item</span><span class="si">}</span> <span class="na">onPress=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSelectItem</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">)</span><span class="si">}</span><span class="p">/&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/**
     * Render the component
     */</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">statusBarSettings</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">rightIcons</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">&lt;</span><span class="nc">TouchableHighlight</span> <span class="na">onPress=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onAddItem</span><span class="p">()</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Icon</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">rightIcon</span><span class="si">}</span> <span class="na">name=</span><span class="s2">"plus"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">TouchableHighlight</span><span class="p">&gt;</span>
            <span class="p">],</span>
            <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Notes</span><span class="dl">'</span>
        <span class="p">};</span>

        <span class="kd">const</span> <span class="nx">listSettings</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span>
            <span class="na">keyExtractor</span><span class="p">:</span> <span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span><span class="p">,</span>
            <span class="na">onRefreshItems</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onRefreshItems</span><span class="p">,</span>
            <span class="na">refreshing</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">refreshing</span><span class="p">,</span>
            <span class="na">renderItem</span><span class="p">:</span> <span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderItem</span><span class="p">(</span><span class="nx">info</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">activeRow</span><span class="p">)</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">fullpage</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">statusBar</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">ActionBar</span> <span class="err">{</span><span class="p">...</span><span class="nt">statusBarSettings</span><span class="err">}</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">content</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">FlatList</span> <span class="err">{</span><span class="p">...</span><span class="nt">listSettings</span><span class="err">}</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This is all fairly basic <code class="highlighter-rouge">FlatList</code> code. If you use a simple application, like this:</p>

<figure class="highlight"><pre><code class="language-jsx" data-lang="jsx"><span class="kd">const</span> <span class="nx">newItem</span> <span class="o">=</span> <span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">content</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">noteId</span><span class="p">:</span> <span class="nx">uuid</span><span class="p">.</span><span class="nx">v4</span><span class="p">(),</span>
        <span class="na">title</span><span class="p">:</span> <span class="nx">title</span><span class="p">,</span>
        <span class="na">content</span><span class="p">:</span> <span class="nx">content</span><span class="p">,</span>
        <span class="na">createdAt</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
        <span class="na">updatedAt</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Application</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nx">newItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">first item</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">first item content</span><span class="dl">'</span><span class="p">),</span>
            <span class="nx">newItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">item 2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">second item content</span><span class="dl">'</span><span class="p">),</span>
            <span class="nx">newItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">item 3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">third item content</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">];</span>

        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nc">View</span> <span class="na">style=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">fullpage</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">NoteList</span>
                    <span class="na">items=</span><span class="si">{</span><span class="nx">items</span><span class="si">}</span>
                <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">View</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Then you should be able to see the three items and click on them. A debug message will appear in the debug console. In addition, you can click on the plus sign in the status bar and get the <code class="highlighter-rouge">onAddItem</code> debug message.</p>

<p>Now, let‚Äôs consider swiping. All this work is done in the <code class="highlighter-rouge">NoteList.js</code> component. I‚Äôm going to use <code class="highlighter-rouge">react-native-swipeout</code> to handle swiping. Firstly, I need to understand what row is currently showing the swipe-right drawer. To do this, add an <code class="highlighter-rouge">activeRow</code> element to the component state:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">({</span>
        <span class="na">activeRow</span><span class="p">:</span> <span class="kc">null</span>
    <span class="p">});</span>
<span class="p">}</span></code></pre></figure>

<p>Next, ensure that the <code class="highlighter-rouge">FlatList</code> is re-rendered when the state is changed. This is handled in the <code class="highlighter-rouge">FlatList</code> props:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">listSettings</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span>
    <span class="na">extraData</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">activeRow</span><span class="p">,</span>
    <span class="na">keyExtractor</span><span class="p">:</span> <span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span><span class="p">,</span>
    <span class="na">onRefreshItems</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onRefreshItems</span><span class="p">,</span>
    <span class="na">refreshing</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">refreshing</span><span class="p">,</span>
    <span class="na">renderItem</span><span class="p">:</span> <span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderItem</span><span class="p">(</span><span class="nx">info</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">activeRow</span><span class="p">)</span>
<span class="p">};</span></code></pre></figure>

<p>This state is changed on two occasions. Firstly, when the user swipes right, I‚Äôm going to call event handler <code class="highlighter-rouge">this.onSwipeOpen()</code>. Then, when the swipe-right drawer closes, I‚Äôm going to call <code class="highlighter-rouge">this.onSwipeClose()</code>. I‚Äôll use these methods to control the state:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">onSwipeOpen</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">rowId</span><span class="p">,</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">activeRow</span><span class="p">:</span> <span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span> <span class="p">});</span>
<span class="p">}</span>

<span class="nx">onSwipeClose</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">rowId</span><span class="p">,</span> <span class="nx">direction</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">activeRow</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">direction</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">activeRow</span><span class="p">:</span> <span class="kc">null</span> <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The important functionality is within the <code class="highlighter-rouge">onSwipeClose()</code> method. This will only reset the state to <code class="highlighter-rouge">null</code> (meaning nothing is selected) when the closed item is the currently active element. This is important because Swipeout calls the <code class="highlighter-rouge">onClose</code> event handler (which is this method) for all sorts of events, most of which do not actually indicate a new swipe.</p>

<p>Finally, let‚Äôs take a look at how this is rendered in the <code class="highlighter-rouge">renderItem()</code> method:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">renderItem</span><span class="p">(</span><span class="nx">info</span><span class="p">,</span> <span class="nx">activeRow</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">swipeSettings</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">autoClose</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">close</span><span class="p">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">.</span><span class="nx">noteId</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">activeRow</span><span class="p">,</span>
        <span class="na">onClose</span><span class="p">:</span> <span class="p">(</span><span class="nx">secId</span><span class="p">,</span> <span class="nx">rowId</span><span class="p">,</span> <span class="nx">direction</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSwipeClose</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="nx">rowId</span><span class="p">,</span> <span class="nx">direction</span><span class="p">),</span>
        <span class="na">onOpen</span><span class="p">:</span> <span class="p">(</span><span class="nx">secId</span><span class="p">,</span> <span class="nx">rowId</span><span class="p">,</span> <span class="nx">direction</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSwipeOpen</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span> <span class="nx">rowId</span><span class="p">,</span> <span class="nx">direction</span><span class="p">),</span>
        <span class="na">right</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">onPress</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onDeleteItem</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">),</span> <span class="na">text</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Delete</span><span class="dl">'</span><span class="p">,</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">delete</span><span class="dl">'</span> <span class="p">}</span>
        <span class="p">],</span>
        <span class="na">rowId</span><span class="p">:</span> <span class="nx">info</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span>
        <span class="na">sectionId</span><span class="p">:</span> <span class="mi">1</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">Swipeout</span> <span class="p">{...</span><span class="nx">swipeSettings</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NoteListItem</span> <span class="nx">item</span><span class="o">=</span><span class="p">{</span><span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">}</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSelectItem</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">item</span><span class="p">)}</span><span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/Swipeout</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>The main item to note here is that the rowId is filled in by the index of the data object passed to FlatList, which starts at 0 and goes up from there. The <code class="highlighter-rouge">onOpen()</code> and <code class="highlighter-rouge">onClose()</code> event handlers are wired to the new <code class="highlighter-rouge">onSwipeOpen()</code> and <code class="highlighter-rouge">onSwipeClose()</code> methods, and the close flag is set so that the drawer is closed if the active row does not match.</p>

<p>If you implement this code, you will note the following:</p>

<ul>
  <li>Pressing a row calls <code class="highlighter-rouge">onSelectItem()</code>.</li>
  <li>Swiping right will open the swipe-right drawer with the Delete button in it.</li>
  <li>Swiping right on another row will cause the original swipe-right drawer to close.</li>
  <li>Pressing the delete button calls <code class="highlighter-rouge">onDeleteItem()</code>.</li>
</ul>

<p><img src="/assets/images/2017-08-07-image1.png" alt="" /></p>

<p>Hopefully, the next blog post will be about the master-detail pattern in React Native. Until then, I hope this helps implementing awesome lists.</p>

:ET