I"Ki<p>I’ve been working on a personal project, trying to get to grips with the various <a href="https://developer.android.com/topic/libraries/architecture/">Android Architecture Components</a> and Kotlin. One of the things I came up with was the requirement to deal with type conversion when using a SQLite database and the <a href="https://developer.android.com/training/data-storage/room/">Room persistence library</a>. Room is a nice abstraction to the internal SQLite database that converts models to tables within SQLite. It’s nice because it works alongside LiveData and RxJava to provide observable objects — when the database changes, the observable changes as well.</p>

<h2 id="write-a-room-data-access-layer-the-normal-way">Write a Room data access layer the normal way</h2>

<p>Let me explain my problem with type conversion with an example. I’ve got a nice model:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.persistence.room.ColumnInfo</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.Entity</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.PrimaryKey</span>
<span class="k">import</span> <span class="nn">java.time.Instant</span>
<span class="k">import</span> <span class="nn">java.util.*</span>

<span class="cm">/**</span><span class="err">
</span><span class="cm"> * Definition of an Album.</span><span class="err">
</span><span class="cm"> */</span>
<span class="nd">@Entity</span><span class="p">(</span><span class="n">tableName</span> <span class="p">=</span> <span class="s">"albums"</span><span class="p">)</span>
<span class="kd">data class</span> <span class="nc">Album</span><span class="p">(</span>
        <span class="nd">@PrimaryKey</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"id"</span><span class="p">)</span>         <span class="kd">var</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">.</span><span class="n">randomUUID</span><span class="p">().</span><span class="n">toString</span><span class="p">(),</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"created"</span><span class="p">)</span>    <span class="kd">var</span> <span class="py">created</span><span class="p">:</span> <span class="n">Instant</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">now</span><span class="p">(),</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"modified"</span><span class="p">)</span>   <span class="kd">var</span> <span class="py">modified</span><span class="p">:</span> <span class="n">Instant</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">now</span><span class="p">(),</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"deleted"</span><span class="p">)</span>    <span class="kd">var</span> <span class="py">deleted</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"album_name"</span><span class="p">)</span> <span class="kd">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">"New Album"</span><span class="p">,</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"hidden"</span><span class="p">)</span>     <span class="kd">var</span> <span class="py">hidden</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
        <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"pinned"</span><span class="p">)</span>     <span class="kd">var</span> <span class="py">pinned</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>
<span class="p">)</span></code></pre></figure>

<p>This is a fairly simple model for the Room persistence layer. However, I’m using the (relatively) new java.time package that is available in Java 1.8. Specifically, the <code class="highlighter-rouge">Instant</code> type (which represents a time zone agnostic moment in time) is not recognized by SQLite or Room.</p>

<p>Continuing on, I have a DAO:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.paging.DataSource</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.*</span>

<span class="nd">@Dao</span>
<span class="kd">interface</span> <span class="nc">AlbumDao</span> <span class="p">{</span>
    <span class="nd">@Insert</span><span class="p">(</span><span class="n">onConflict</span> <span class="p">=</span> <span class="n">OnConflictStrategy</span><span class="p">.</span><span class="n">REPLACE</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">addAlbum</span><span class="p">(</span><span class="nv">album</span><span class="p">:</span> <span class="nc">Album</span><span class="p">)</span>

    <span class="nd">@Update</span>
    <span class="k">fun</span> <span class="nf">updateAlbum</span><span class="p">(</span><span class="nv">album</span><span class="p">:</span> <span class="nc">Album</span><span class="p">)</span>

    <span class="nd">@Delete</span>
    <span class="k">fun</span> <span class="nf">reallyDeleteAlbum</span><span class="p">(</span><span class="nv">album</span><span class="p">:</span> <span class="nc">Album</span><span class="p">)</span>

    <span class="nd">@Query</span><span class="p">(</span><span class="s">"SELECT * FROM albums WHERE NOT(deleted) AND NOT(hidden) ORDER BY pinned,album_name"</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">listAlbumsByName</span><span class="p">():</span> <span class="nc">DataSource</span><span class="p">.</span><span class="n">Factory</span><span class="p">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">Album</span><span class="p">&gt;</span>

    <span class="nd">@Query</span><span class="p">(</span><span class="s">"SELECT * FROM albums WHERE id = :id"</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">getAlbumById</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="nc">String</span><span class="p">):</span> <span class="nc">Album</span>
<span class="p">}</span></code></pre></figure>

<p>This DAO does the normal CRUD operations. I have a funky custom select statement for dealing with the ordering of the albums. I want “pinned” albums to appear first and then in alphabetical order. I’m also using a data source as a return value here so I can deal with the paging adapter. Finally, here is my app database class:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.persistence.room.Database</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.Room</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.RoomDatabase</span>
<span class="k">import</span> <span class="nn">android.content.Context</span>

<span class="nd">@Database</span><span class="p">(</span><span class="n">entities</span> <span class="p">=</span> <span class="p">[</span> <span class="n">Album</span><span class="o">::</span><span class="kd">class</span> <span class="err">], </span><span class="nc">version</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">exportSchema</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">AppDatabase</span> <span class="p">:</span> <span class="n">RoomDatabase</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">albumDao</span><span class="p">():</span> <span class="nc">AlbumDao</span>

    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="nd">@Volatile</span> <span class="k">private</span> <span class="kd">var</span> <span class="py">INSTANCE</span><span class="p">:</span> <span class="n">AppDatabase</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>

        <span class="k">fun</span> <span class="nf">getInstance</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">):</span> <span class="nc">AppDatabase</span> <span class="p">=</span>
                <span class="n">INSTANCE</span> <span class="o">?:</span> <span class="n">synchronized</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">INSTANCE</span> <span class="o">?:</span> <span class="n">buildDatabase</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">also</span> <span class="p">{</span> <span class="n">INSTANCE</span> <span class="p">=</span> <span class="n">it</span> <span class="p">}</span>
                <span class="p">}</span>

        <span class="k">private</span> <span class="k">fun</span> <span class="nf">buildDatabase</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">)</span> <span class="p">=</span>
                <span class="n">Room</span><span class="p">.</span><span class="n">databaseBuilder</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">applicationContext</span><span class="p">,</span> <span class="n">AppDatabase</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">,</span> <span class="s">"app.db"</span><span class="p">).</span><span class="n">build</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Again, this is a fairly normal — even boilerplate — implementation of the database class. It deals with building the database and is a synchronized singleton. I took this code directly from the <a href="https://github.com/googlesamples/android-architecture-components/blob/master/BasicRxJavaSampleKotlin/app/src/main/java/com/example/android/observability/persistence/UsersDatabase.kt">Google sample</a>.</p>

<h2 id="add-converters">Add Converters</h2>

<p>Compiling this, I get the following errors:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: Cannot figure out how to save this field into database. You can consider adding a type converter for it.
    private final java.time.Instant created = null;
error: Cannot figure out how to save this field into database. You can consider adding a type converter for it.
    private java.time.Instant modified;
</code></pre></div></div>

<p>This is not unexpected. As I mentioned earlier, SQLite doesn’t understand the <code class="highlighter-rouge">Instant</code> type, so it needs to be converted before being stored. Fortunately, the Room persistence library has provided a mechanism for this. First, create a class with a to/from pair of type converters:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.persistence.room.TypeConverter</span>
<span class="k">import</span> <span class="nn">java.time.Instant</span>

<span class="kd">class</span> <span class="nc">Converters</span> <span class="p">{</span>
    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="nd">@TypeConverter</span>
        <span class="nd">@JvmStatic</span>
        <span class="k">fun</span> <span class="nf">fromInstant</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="nc">Instant</span><span class="p">):</span> <span class="nc">Long</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">value</span><span class="p">.</span><span class="n">toEpochMilli</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="nd">@TypeConverter</span>
        <span class="nd">@JvmStatic</span>
        <span class="k">fun</span> <span class="nf">toInstant</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="nc">Long</span><span class="p">):</span> <span class="nc">Instant</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">Instant</span><span class="p">.</span><span class="n">ofEpochMilli</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The important thing here is that they are annotated with both the <code class="highlighter-rouge">@TypeConverter</code> and <code class="highlighter-rouge">@JvmStatic</code> annotations. This comes from a peculiarity of Kotlin. When you place something in the companion object, it doesn’t appear as a normal static method. You can’t call <code class="highlighter-rouge">Converters.fromInstant()</code> from within a Java class. Instead, you have to call <code class="highlighter-rouge">Converters.Companion().fromInstant()</code>. The <code class="highlighter-rouge">Companion</code> here is the companion object. If, however, you annotate the method with <code class="highlighter-rouge">@JvmStatic</code> it will get the appropriate treatment to be a true static method of the <code class="highlighter-rouge">Converters</code> class.</p>

<p>Now that I have a set of type converters, I can add it to the application database class:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.persistence.room.Database</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.Room</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.RoomDatabase</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.TypeConverters</span>
<span class="k">import</span> <span class="nn">android.content.Context</span>

<span class="nd">@Database</span><span class="p">(</span><span class="n">entities</span> <span class="p">=</span> <span class="p">[</span> <span class="n">Album</span><span class="o">::</span><span class="kd">class</span> <span class="err">], </span><span class="nc">version</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">exportSchema</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
<span class="nd">@TypeConverters</span><span class="p">(</span><span class="n">Converters</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">AppDatabase</span> <span class="p">:</span> <span class="n">RoomDatabase</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">albumDao</span><span class="p">():</span> <span class="nc">AlbumDao</span>

    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="nd">@Volatile</span> <span class="k">private</span> <span class="kd">var</span> <span class="py">INSTANCE</span><span class="p">:</span> <span class="n">AppDatabase</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>

        <span class="k">fun</span> <span class="nf">getInstance</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">):</span> <span class="nc">AppDatabase</span> <span class="p">=</span>
                <span class="n">INSTANCE</span> <span class="o">?:</span> <span class="n">synchronized</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">INSTANCE</span> <span class="o">?:</span> <span class="n">buildDatabase</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">also</span> <span class="p">{</span> <span class="n">INSTANCE</span> <span class="p">=</span> <span class="n">it</span> <span class="p">}</span>
                <span class="p">}</span>

        <span class="k">private</span> <span class="k">fun</span> <span class="nf">buildDatabase</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">)</span> <span class="p">=</span>
                <span class="n">Room</span><span class="p">.</span><span class="n">databaseBuilder</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">applicationContext</span><span class="p">,</span> <span class="n">AppDatabase</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">,</span> <span class="s">"app.db"</span><span class="p">).</span><span class="n">build</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The important line here is line 8 — the @TypeConverters annotation. You can put as many converters as you want. Just include a to/from pair for the custom type.</p>

<h2 id="fix-the-model-class">Fix the model class</h2>

<p>There is another warning that creeps up:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>warning: There are multiple good constructors and Room will pick the no-arg constructor. You can use the @Ignore annotation to eliminate unwanted constructors.
</code></pre></div></div>

<p>If you have done any Room development with Kotlin, the likelihood is that you have run into this. This is because the de-facto advice is to use a data class as the model, such as I have done above. You can easily get rid of this warning by switching to a normal class. This is my converted class:</p>

<figure class="highlight"><pre><code class="language-kotlin" data-lang="kotlin"><span class="k">import</span> <span class="nn">android.arch.persistence.room.ColumnInfo</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.Entity</span>
<span class="k">import</span> <span class="nn">android.arch.persistence.room.PrimaryKey</span>
<span class="k">import</span> <span class="nn">java.time.Instant</span>
<span class="k">import</span> <span class="nn">java.util.*</span>

<span class="nd">@Entity</span><span class="p">(</span><span class="n">tableName</span> <span class="p">=</span> <span class="s">"albums"</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">Album</span> <span class="p">{</span>
    <span class="nd">@PrimaryKey</span>
    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"id"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">id</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">.</span><span class="n">randomUUID</span><span class="p">().</span><span class="n">toString</span><span class="p">()</span>

    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"created"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">created</span><span class="p">:</span> <span class="n">Instant</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>

    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"modified"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">modified</span><span class="p">:</span> <span class="n">Instant</span> <span class="p">=</span> <span class="n">Instant</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>

    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"deleted"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">deleted</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>

    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"album_name"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">=</span> <span class="s">"New Album"</span>

    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"hidden"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">hidden</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>

    <span class="nd">@ColumnInfo</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"pinned"</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">pinned</span><span class="p">:</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">false</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">equals</span><span class="p">(</span><span class="nv">other</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?):</span> <span class="nc">Boolean</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">return</span> <span class="k">false</span> <span class="c1">// null check</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">javaClass</span> <span class="p">!=</span> <span class="n">other</span><span class="p">.</span><span class="n">javaClass</span><span class="p">)</span>
            <span class="k">return</span> <span class="k">false</span> <span class="c1">// type check</span>

        <span class="kd">val</span> <span class="py">mOther</span> <span class="p">=</span> <span class="n">other</span> <span class="k">as</span> <span class="n">Album</span>
        <span class="k">return</span> <span class="n">id</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">id</span>
            <span class="p">&amp;&amp;</span> <span class="n">created</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">created</span>
            <span class="p">&amp;&amp;</span> <span class="n">modified</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">modified</span>
            <span class="p">&amp;&amp;</span> <span class="n">deleted</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">deleted</span>
            <span class="p">&amp;&amp;</span> <span class="n">name</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">name</span>
            <span class="p">&amp;&amp;</span> <span class="n">hidden</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">hidden</span>
            <span class="p">&amp;&amp;</span> <span class="n">pinned</span> <span class="p">==</span> <span class="n">mOther</span><span class="p">.</span><span class="n">pinned</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">hashCode</span><span class="p">():</span> <span class="nc">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Objects</span><span class="p">.</span><span class="n">hash</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">created</span><span class="p">,</span> <span class="n">modified</span><span class="p">,</span> <span class="n">deleted</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">hidden</span><span class="p">,</span> <span class="n">pinned</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Two of the things that the data class provides are the <code class="highlighter-rouge">equals()</code> and <code class="highlighter-rouge">hashCode()</code> methods. Since I am switching to a non-data class, I now need to provide those. This is actually not really a problem for me because I am going to be doing a <code class="highlighter-rouge">RecyclerView</code> with a <code class="highlighter-rouge">PagedListAdapter</code>. The <code class="highlighter-rouge">PagedListAdapter</code> requires me to provide a <code class="highlighter-rouge">Diffutil.ItemCallback</code> to compare two objects in the list. The best place to compare two objects is within the model class itself, so I end up extending the data class for this purpose.</p>

<p>Now my code compiles without warnings and I have bi-directional type conversion when storing data in SQLite. I can move on to my UI.</p>

<!-- AWS Links -->

<!-- Consoles -->

<!-- My Links -->

:ET